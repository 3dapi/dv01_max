<?php
	include '../base/lc_header.php';
	include '../base/lc_util.php';
?>

<!--------------------------- Body Begin ---------------------------------------->

<div class="Section1">

<br>
<h1>◈Max Plugin◈</h1>

<p class=MsoNormal>플러그인<span lang=EN-US>(Plugin)</span>의 뜻을 찾아보면 프로그램에 없던 새 기능을
추가하기 위해 끼워 넣는」부가적인 프로그램으로 자체적으로는 실행능력은 없지만 특정한 프로그램 속에서 함께 실행되어 기능을 발휘한다고 되어 있습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>Autodesk 3D Max(</span>이하<span lang=EN-US>
MAX: </span>맥스<span lang=EN-US>) Plugin</span>은 사용자의 목적에 맞게 맥스 프로그램의 기능을 보강하기 위해서
만든 프로그램입니다<span lang=EN-US>. </span>윈도우 운영체제에서<span lang=EN-US> MAX</span>용 플러그인의
구현은<span lang=EN-US> DLL (Dynamic Linking Library)</span>입니다<span lang=EN-US>. </span>따라서
원래 프로그램의 형식과 윈도우<span lang=EN-US> DLL</span>의 표준에 맞게 프로그램을 만든다면 플러그인을 만들 수 있습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal>맥스 플러그인은 아무거나 만들 수 있는 것이 아니라 맥스에서 지원되는 것만 만들 수 있습니다<span
lang=EN-US>. </span>어떤 플러그인을 만들 것인지는 <span lang=EN-US>Visual Studio</span>에서 맥스
플러그인 만드는<span lang=EN-US> Wizard</span>로 확인할 수 있으며 이 중에서<span lang=EN-US>
&quot;File Export&quot;</span>가 우리가 만들고자 하는 플러그인 입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&quot;File Export&quot; </span>플러그인은 게임에서 필요한
맥스 파일의 일부를 꺼내오는 것입니다<span lang=EN-US>. </span>물론 다 꺼내오면 좋겠지만 그렇게 하기는 힘들고 설령 다 가져온다
하더라도 맥스 프로그램과 게임 프로그램의 자료 해석 차이로 화면에 보이는 모습은 약간의 차이가 있을 수 있습니다<span lang=EN-US>.
</span>좋은<span lang=EN-US> &quot;File Export&quot; </span>플러그인은 맥스 화면과 게임 화면의 차이를
줄이고 최대한 일치시키는 것이라 할 수 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>보통 경력자들도 쓸만한<span lang=EN-US> &quot;File Export&quot; </span>플러그인을
만드는데 거의<span lang=EN-US> 4~6</span>개월의 시간이 소요됩니다<span lang=EN-US>. </span>이것은 맥스와<span
lang=EN-US> D3D</span>는 같은 데이터라도 처리하는 방식이 다르고 구체적인 맥스의 내용을 모르는 상태에서 작업을 하기 때문입니다<span
lang=EN-US>. </span>또한 맥스 프로그램의 화면에서는 정상적인 모습으로 나타나지만<span lang=EN-US>
Exporting</span>을 하면 미처 처리하지 못한 데이터로 인해 원치 않는 모습이 종종 나타납니다<span lang=EN-US>. </span>따라서
완벽한 플러그인을 만들기까지 너무 많은 시간이 소요된다면 회사로서도 비용의 문제가 발생하기 때문에 버그를 피하는 방법을 그래픽 담당자들과 논의를
하고 그래픽 작업의 순서를 결정합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이 장은 완벽하지 않지만 그래도 어느 정도 쓸 만한 플러그인을 만들어보는 것이 목적입니다<span
lang=EN-US>. </span>모든 맥스 데이터에 대해서 데이터를<span lang=EN-US> Export</span>한다고는 할 수 없고
그러한 문제들은 독자의 목으로 남겨 놓겠습니다<span lang=EN-US>. </span>또한<span lang=EN-US> 3D </span>맥스가<span
lang=EN-US> 2010 </span>버전까지 출시되었지만 여기서는<span lang=EN-US> 8.0</span>기준으로 플러그인을 만들겠습니다<span
lang=EN-US>. </span>그것은 맥스의 가격이<span lang=EN-US> 500</span>만원이 넘습니다<span
lang=EN-US>. </span>보통 교육기관이나 기업체에서 소프트웨어가 새로 출시되면 학생들 또는 개발자들을 위해 새로운 소프트웨어를 공급하는
것이 일반적이지만 개발자 월급 보다 훨씬 비싼 소프트웨어를 업그레이드 한다는 것은 회사 운영상 맞지 않기 때문에 대부분 이전 버전을 그대로 사용하는
경향이 많습니다<span lang=EN-US>. </span>프로그래머의 입자에서 바라보아도 맥스 버전이 올라가도 필요한<span
lang=EN-US> SDK </span>내용은 거의 그대로인 것이 대부분입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>8.0</span>을 선택한 주된 이유는 가장 많이 사용되는 버전이기도 하지만
이전에는 맥스에서 애니메이션 작업을 할 때<span lang=EN-US> Physique</span>를 주로 사용했는데<span
lang=EN-US> 8.0 </span>이후에는 스키닝<span lang=EN-US>(Skinning)</span>이 지원되어 이 방식으로 작업을
많이 한다고 합니다<span lang=EN-US>. </span>스키닝으로 애니메이션을 작업하면 그래픽과 게임에서 일치하지 않는 버그 찾기도 수월하다고
합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:16.0pt'>5.1 SDK</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:14.0pt'>5.1.1 SDK </span><span
style='font-size:14.0pt'>설치와<span lang=EN-US> VC Project</span></span></p>

<p class=MsoNormal>맥스는 용량이 크므로<span lang=EN-US> Program Files</span>에 설치하기 보다는 하드를
분할해서<span lang=EN-US> C </span>대신<span lang=EN-US> D</span>나<span lang=EN-US> E</span>에
설치하는 것이 좋습니다<span lang=EN-US>. </span>저는<span lang=EN-US> &quot;D:\_3dsMax8&quot;
</span>에 설치 했습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>맥스<span lang=EN-US> SDK</span>는 맥스와 따로 설치됩니다<span
lang=EN-US>. </span>다음과 같이<span lang=EN-US> install CD</span>가 있으면<span
lang=EN-US> SDK</span>를 설치합니다<span lang=EN-US>. </span>저는<span lang=EN-US>
&quot;D:\_3dsMax8\maxsdk&quot;</span>에 설치했습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img width=298 height=146
src="https://github.com/3dapi/bs25_shader1/raw/master/dv01_max.files/image001.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;MAX SDK </span>설치<span lang=EN-US>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>SDK</span>를 설치하고 나서 맥스<span lang=EN-US> SDK</span>가
설치된 폴더 예를 들어<span lang=EN-US> &quot;D:\_3dsMax8\maxsdk\howto&quot;</span>에 가면<span
lang=EN-US> &quot;3dsmaxPluginWizard&quot; </span>폴더가 있습니다<span lang=EN-US>. </span>이
폴더의<span lang=EN-US> &quot;Readme.txt&quot;</span>파일을 읽어보면 이 위저드는<span
lang=EN-US> &quot;Visual Studio 7.1&quot;</span>용 위저드 임을 알리고 있습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>또한<span lang=EN-US> Installing 2</span>번을 보면<span
lang=EN-US> &quot;3dsmaxPluginWizard.vsz&quot; </span>파일을 열어서 다음 부분을 고치라고 합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>Param=&quot;ABSOLUTE_PATH = [Absolute Path
Location of 3dsmaxPluginWizard Root Directory]&quot;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이것은<span lang=EN-US> Visual Studio</span>에서 위저드를 실행할 때 맥스<span
lang=EN-US> SDK</span>의 위저드를 실행할 수 있는 절대 경로를 설정하라는 것으로 그림처럼<span lang=EN-US>
&quot;dsmaxPluginWizard.vsz&quot; </span>파일이 있는 경로를 복사해서 다음과 이 만듭니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>Param=&quot;ABSOLUTE_PATH =
[D:\_3dsMax8\maxsdk\howto\3dsmaxPluginWizard]&quot;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>또한 경로 이름에 <span lang=EN-US>'\'</span>를 추가하지 말라고 합니다<span
lang=EN-US>. (</span>그냥 탐색기에 있는 경로를 붙이면 문제 없습니다<span lang=EN-US>.)</span></p>

<p class=MsoNormal><span lang=EN-US><img width=328 height=217
src="https://github.com/3dapi/bs25_shader1/raw/master/dv01_max.files/image002.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt; dsmaxPluginWizard.vsz </span>파일의 경로 복사<span
lang=EN-US>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>다음으로<span lang=EN-US> Installing 3</span>번에 보면</p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>3dsmaxPluginWizard.ico</span></p>

<p class=MsoNormal><span lang=EN-US>3dsmaxPluginWizard.vsdir</span></p>

<p class=MsoNormal><span lang=EN-US>3dsmaxPluginWizard.vsz</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>파일<span lang=EN-US> 3</span>개를 <span lang=EN-US>Visual
Studio</span>가 설치된 폴 더 밑에<span lang=EN-US> &quot;Visual Studio </span>폴더<span
lang=EN-US>\Vc7\vcprojects Vc7\vcprojects&quot; </span>폴더에 복사하라고 하는데 다음과 같이 하면 됩니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img width=349 height=206
src="https://github.com/3dapi/bs25_shader1/raw/master/dv01_max.files/image003.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;Visual Studio </span>위저드 프로젝트 설치<span
lang=EN-US>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이렇게 하면 위저드 설치는 끝이 납니다<span lang=EN-US>. Visual Studio</span>의
새 프로젝트를 실행하면 다음 그림처럼 맥스 플러그인 위저드 선택 아이콘이 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img width=553 height=295
src="https://github.com/3dapi/bs25_shader1/raw/master/dv01_max.files/image004.jpg"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>맥스 플러그인 위저드 실행<span lang=EN-US>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>확인 버튼을 누르면 어떤 플러그인을 만들 것인지 선택 화면이 나옵니다<span lang=EN-US>.
&quot;File Export&quot;</span>를 선택합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img width=495 height=306
src="https://github.com/3dapi/bs25_shader1/raw/master/dv01_max.files/image005.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>플러그인 종류 선택<span lang=EN-US>:
&quot;File Exporter&quot;&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>다음 창에<span lang=EN-US> Plugin Detail </span>창이 있습니다<span
lang=EN-US>. </span>그냥 넘어갑니다<span lang=EN-US>. </span>그 다음 창에는 맥스<span
lang=EN-US> SDK</span>가 설치된 폴더<span lang=EN-US>, </span>플러그인이 컴파일 되면 복사될 경로<span
lang=EN-US>, </span>맥스의 실행 경로를 지정하는 것이 나옵니다<span lang=EN-US>. </span>맥스는 실행 파일이
있는 하위 폴더<span lang=EN-US> &quot;plugins&quot; </span>에 있는 플러그인들을 실행할 때 전부 올립니다<span
lang=EN-US>. </span>따라서 이곳에 자동으로 복사하도록 설정하는 것이 좋습니다<span lang=EN-US>. </span>이것이
설정이 안되면 매 번 플러그인을 이곳에 복사해 놓아야 합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img width=493 height=306
src="https://github.com/3dapi/bs25_shader1/raw/master/dv01_max.files/image006.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;SDK </span>헤더 파일<span lang=EN-US> Path,
</span>플러그인 출력 위치<span lang=EN-US>, </span>맥스 실행 파일 경로 설정<span lang=EN-US>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>Finish </span>버튼을 누르면 위저드 코드가 만들어집니다<span
lang=EN-US>. 2005</span>의 경우에는 프로젝트가<span lang=EN-US> Visual Studio</span>에 올라오지
않을 것입니다<span lang=EN-US>. </span>이것은 이 위저드가<span lang=EN-US> 2003 </span>버전에 맞추어져
있기 때문입니다<span lang=EN-US>. Visual Studio</span>를 닫고 앞서 만든 <span lang=EN-US>maxProject1.vcproj
</span>를 다시 실행하면 변환 마법사가 진행이 됩니다<span lang=EN-US>. </span>마법사를 진행해도 다음과 같은 에러가 발생할
것입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&quot;XML </span>구문을 분석하는 동안 다음과 같은 오류가 발생했습니다<span
lang=EN-US>. </span>파일<span lang=EN-US>:
E:\_Document\_vc\maxProject1\maxProject1.vcproj </span>줄<span lang=EN-US>: 86 </span>열<span
lang=EN-US>: 22 </span>오류 메시지<span lang=EN-US>: </span>부모 요소<span lang=EN-US>
'Configuration'</span>의 콘텐츠 모델에 따르면<span lang=EN-US> 'IntelOptions'</span>은<span
lang=EN-US>(</span>는<span lang=EN-US>) </span>예기치 않은 요소입니다<span lang=EN-US>. …&quot;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>당황하지 말고 메모장으로<span lang=EN-US> vcproj </span>파일을 열어서 다음 부분을 과감히
삭제 합니다<span lang=EN-US>. </span>다시<span lang=EN-US> Visual Studio</span>를 실행하고 변환
마법사를 진행하면 무사히 프로젝트가 올라 옵니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img width=425 height=135
src="https://github.com/3dapi/bs25_shader1/raw/master/dv01_max.files/image007.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>프로젝트 옵션 설정<span lang=EN-US>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>여기까지 했으면 다 된 것 같은데 안타깝게도 프로젝트를 빌드 하면 에러가<span lang=EN-US> 10</span>개
정도 만들어 집니다<span lang=EN-US>. </span>이것은<span lang=EN-US> Visual Studio 2005 </span>버전이
이전 버전보다 <span lang=EN-US>C++ </span>표준을 엄격히 따르다 보니 만들어진 문제들입니다<span lang=EN-US>.
</span>찾아서 해결하면 됩니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>첫 번째 에러는 <span lang=EN-US>d:\_3dsmax8\maxsdk\include\manipulator.h(463)
</span>파일의 <span lang=EN-US>ManipExport Invalidate() { mValid = NEVER; }</span>에서
나왔군요<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>2005 </span>이전에는 함수의 반환 형을 적지 않으면<span
lang=EN-US> int</span>형으로 컴파일러가 인식했고 반환을 지정하지 않아도<span lang=EN-US> Warning</span>만
만들어지고 컴파일은 됐습니다<span lang=EN-US>. </span>코드의 내용상으로 봐서 반환은 없어<span lang=EN-US>
void</span>가 맞겠지만 이전에는<span lang=EN-US> int</span>형이었으므로<span lang=EN-US>
Invalidate </span>앞에<span lang=EN-US> int</span>를 적어 줍니다<span lang=EN-US>.
ManipExport int Invalidate() { mValid = NEVER; }</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>또 다른 에러는 </p>

<p class=MsoNormal><span lang=EN-US>&quot;</span><span lang=EN-US>e:\_document\_vc\maxproject1\maxproject1.cpp(48):error
C2065: 'themaxProject1'&quot; </span>에서 만들어 졌습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&quot;void* Create(BOOL loading = FALSE) {
return &amp;themaxProject1; }&quot; </span>으로 작성되어 있는 부분을 프로젝트의 이름과 같은 클래스의 인스턴스를
만드는 코드로 전환합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:blue'>void</span><span
lang=EN-US>* </span><span lang=EN-US style='color:#880000'>Create</span><span
lang=EN-US>(</span><span lang=EN-US style='color:blue'>BOOL</span><span
lang=EN-US> loading = </span><span lang=EN-US style='color:#A000A0'>FALSE</span><span
lang=EN-US>) { </span><span lang=EN-US style='color:blue'>return</span><span
lang=EN-US> </span><span lang=EN-US style='color:blue'>new</span><span
lang=EN-US> </span><span lang=EN-US style='color:blue'>maxProject1</span><span
lang=EN-US>(); }</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>그 다음의 <span lang=EN-US>maxProject1ObjClassDesc </span>클래스 코드부터
콜백<span lang=EN-US>(Call Back) </span>함수 <span lang=EN-US>maxProject1OptionsDlgProc()
</span>전까지 필요 없는 코드이므로 전부 삭제해 버립니다<span lang=EN-US>. </span>대략<span lang=EN-US>
80~ 224 </span>라인이 될 것 같습니다<span lang=EN-US>. </span>이렇게 지우면 클래스는 <span
lang=EN-US style='color:blue'>maxProject1</span><span lang=EN-US>, </span><span
lang=EN-US style='color:blue'>maxProject1ClassDesc</span><span lang=EN-US> </span>두
개만 남아 있을 것입니다<span lang=EN-US>. </span>다시 컴파일 하면 이번에는 리소스 파일<span lang=EN-US>(rc)</span>에서
에러가 만들어질 것입니다<span lang=EN-US>. </span>에러 부분은 지웁니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>다시 빌드 하면 이번에는 <span lang=EN-US>&quot;DllEntry.obj : error
LNK2019: &quot;class ClassDesc2 * __cdecl GetmaxProject1ObjDesc&quot; </span>에러가
발생합니다<span lang=EN-US>. </span>이것은 앞서 <span lang=EN-US>maxProject1ClassDesc </span>클래스를
지웠기 때문입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>DllEntry.cpp</span>의 <span lang=EN-US>16</span>라인<span
lang=EN-US> &quot;extern ClassDesc2* GetmaxProject1ObjDesc();&quot;</span></p>

<p class=MsoNormal>부분과<span lang=EN-US> 59</span>라인<span lang=EN-US> &quot;case
1: return GetmaxProject1ObjDesc();&quot;</span>을 삭제합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>다시 빌드 하면 링크 에러<span lang=EN-US> &quot;error LNK2001:
&quot;public: virtual class Manipulator * __thiscall maxProject1ClassDesc&quot;</span>가
만들어집니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>클래스 <span lang=EN-US>maxProject1ClassDesc </span>안의<span
lang=EN-US> &quot;BOOL IsManipulator() { return TRUE; }&quot; </span>부터 </p>

<p class=MsoNormal><span lang=EN-US>&quot;Manipulator*
CreateManipulator(RefTargetHandle hTarget, INode* pNode);&quot;</span>까지 전부 지웁니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이렇게 지우고 나면 <span lang=EN-US>maxProject1ClassDesc </span>클래스는
다음과 같은 함수만 남아 있을 것입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>class</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>maxProject1ClassDesc</span><span lang=EN-US> : </span><span
lang=EN-US style='color:blue'>public</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>ClassDesc2</span><span lang=EN-US> {</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>public</span><span lang=EN-US>:</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>int</span><span lang=EN-US> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>IsPublic</span><span lang=EN-US>() { </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> </span><span
lang=EN-US style='color:#A000A0'>TRUE</span><span lang=EN-US>; }</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>void</span><span lang=EN-US> *&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>Create</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>BOOL</span><span lang=EN-US> loading = </span><span
lang=EN-US style='color:#A000A0'>FALSE</span><span lang=EN-US>) { </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>new</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>maxProject1</span><span lang=EN-US>(); }</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>const</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>TCHAR</span><span lang=EN-US> *&nbsp; </span><span
lang=EN-US style='color:#880000'>ClassName</span><span lang=EN-US>() { </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> </span><span
lang=EN-US style='color:#880000'>GetString</span><span lang=EN-US>(</span><span
lang=EN-US style='color:#A000A0'>IDS_CLASS_NAME</span><span lang=EN-US>); }</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>SClass_ID</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>SuperClassID</span><span lang=EN-US>() { </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> </span><span
lang=EN-US style='color:#A000A0'>SCENE_EXPORT_CLASS_ID</span><span lang=EN-US>;
}</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>Class_ID</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>ClassID</span><span lang=EN-US>() { </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> </span><span
lang=EN-US style='color:#A000A0'>maxProject1_CLASS_ID</span><span lang=EN-US>;
}</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>const</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>TCHAR</span><span lang=EN-US>* &nbsp; </span><span
lang=EN-US style='color:#880000'>Category</span><span lang=EN-US>() { </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> </span><span
lang=EN-US style='color:#880000'>GetString</span><span lang=EN-US>(</span><span
lang=EN-US style='color:#A000A0'>IDS_CATEGORY</span><span lang=EN-US>); }</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>const</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>TCHAR</span><span lang=EN-US>*&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>InternalName</span><span lang=EN-US>() { </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> </span><span
lang=EN-US style='color:#A000A0'>_T</span><span lang=EN-US>(</span><span
lang=EN-US style='color:fuchsia'>&quot;maxProject1&quot;</span><span
lang=EN-US>); }</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>HINSTANCE</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>HInstance</span><span lang=EN-US>() { </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> hInstance; }</span></p>

<p class=MsoNormal><span lang=EN-US>};</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>솔루션을 다시 빌드하면<span lang=EN-US> &quot;plugins&quot; </span>폴더에<span
lang=EN-US> &quot;maxProject1.dle&quot; </span>파일이 만들어 집니다<span lang=EN-US>. </span>연습
삼아 코드가 동작 하는지 다음과 같이 생성자 소멸자<span lang=EN-US>, </span>그리고<span lang=EN-US>
Ext() </span>함수에 메시지 박스를 띄워 놓고<span lang=EN-US>()</span>브레이크 포인트를 설정<span
lang=EN-US>(F9 </span>키<span lang=EN-US>)</span>합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>maxProject1</span><span lang=EN-US>::</span><span
lang=EN-US style='color:blue'>maxProject1</span><span lang=EN-US>()</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span style='color:red'>●</span><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span lang=EN-US
style='color:#A000A0'>MessageBox</span><span lang=EN-US>(</span><span
lang=EN-US style='color:#A000A0'>NULL</span><span lang=EN-US>, </span><span
lang=EN-US style='color:fuchsia'>&quot;Create maxProject1&quot;</span><span
lang=EN-US>, </span><span lang=EN-US style='color:fuchsia'>&quot;Message&quot;</span><span
lang=EN-US>, </span><span lang=EN-US style='color:red'>0</span><span
lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>}</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>maxProject1</span><span lang=EN-US>::~</span><span
lang=EN-US style='color:blue'>maxProject1</span><span lang=EN-US>() </span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span style='color:red'>●</span><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span lang=EN-US
style='color:#A000A0'>MessageBox</span><span lang=EN-US>(</span><span
lang=EN-US style='color:#A000A0'>NULL</span><span lang=EN-US>, </span><span
lang=EN-US style='color:fuchsia'>&quot;Destory maxProject1&quot;</span><span
lang=EN-US>, </span><span lang=EN-US style='color:fuchsia'>&quot;Message&quot;</span><span
lang=EN-US>, </span><span lang=EN-US style='color:red'>0</span><span
lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>}</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>const</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>TCHAR</span><span lang=EN-US> *</span><span lang=EN-US
style='color:blue'>maxProject1</span><span lang=EN-US>::</span><span
lang=EN-US style='color:#880000'>Ext</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>int</span><span lang=EN-US> n)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoNormal style='word-break:keep-all'><span style='color:red'>●</span><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span lang=EN-US
style='color:#A000A0'>MessageBox</span><span lang=EN-US>(</span><span
lang=EN-US style='color:#A000A0'>NULL</span><span lang=EN-US>, </span><span
lang=EN-US style='color:fuchsia'>&quot;Call maxProject1 Exporter&quot;</span><span
lang=EN-US>, </span><span lang=EN-US style='color:fuchsia'>&quot;Message&quot;</span><span
lang=EN-US>, </span><span lang=EN-US style='color:red'>0</span><span
lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> </span><span
lang=EN-US style='color:#A000A0'>_T</span><span lang=EN-US>(</span><span
lang=EN-US style='color:fuchsia'>&quot;&quot;</span><span lang=EN-US>);</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>디버그 모드로 실행하면 다음과 같이 창이 올라오고 여기에 맥스 프로그램의 위치를 찾아서 넣으면 맥스가 실행이
됩니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img width=326 height=109
src="https://github.com/3dapi/bs25_shader1/raw/master/dv01_max.files/image008.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;Visual Studio</span>에서 플러그인 동작으로 위해 맥스 실행<span
lang=EN-US>: <a href="https://github.com/3dapi/dv01_max/raw/master/mxp00_maxProject1.zip">mxp00_maxProject1.zip</a> &gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>디버딩 정보 없음 창이 나와도<span lang=EN-US> &quot;</span>예<span
lang=EN-US>&quot;</span>를 선택하십시오<span lang=EN-US>.</span></p>

<p class=MsoNormal>아무 도형이나 대충 그리고 다음 그림과 같이<span lang=EN-US> Export</span>를 선택해서
실행하면 설정한 브레이크 포인터가 동작하고 간단한 메시지 창이 올라오는 것을 확인할 수 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=297 height=147
src="https://github.com/3dapi/bs25_shader1/raw/master/dv01_max.files/image009.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>플러그인 실행<span lang=EN-US>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:14.0pt'>5.1.2 </span><span
style='font-size:14.0pt'>다른 프로젝트 수정</span></p>

<p class=MsoNormal>다른 사람이 작성한 플러그인 프로젝트를 수정하고 싶을 때도 있습니다<span lang=EN-US>. </span>예를
들어<span lang=EN-US> &quot;<a href="https://github.com/3dapi/dv01_max/raw/master/mxp00_mymax0.zip">mxp00_mymax0.zip</a>&quot;
</span>를<span lang=EN-US> LcMax</span>라는 프로젝트로 모두 바꾼다고 합시다<span lang=EN-US>. </span>먼저
해 야할 일은 파일 <span lang=EN-US>&quot;mymax.*&quot;</span>로 되어 있는 이름을 <span
lang=EN-US>&quot;LcMax.*&quot;</span>로 바꾸는 것입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=190 height=97
src="https://github.com/3dapi/bs25_shader1/raw/master/dv01_max.files/image010.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>파일 이름 바꾸기<span lang=EN-US>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>다음으로<span lang=EN-US> editplus </span>등의 편집기를 이용해서 그림의 모든 파일을
열어서 <span lang=EN-US>&quot;mymax&quot;</span>라는 이름을<span lang=EN-US>&nbsp; </span>전부<span
lang=EN-US> LcMax</span>로 바꾸어 주어야 합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=374 height=244
src="https://github.com/3dapi/bs25_shader1/raw/master/dv01_max.files/image011.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>프로젝트 내용 전부 바꾸기<span lang=EN-US>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이렇게 파일 이름과 프로젝트의 내용을 바꾸고 나서 다음과 같은 <span lang=EN-US>Class_ID</span>의
값을 찾아서 바꾸어야 합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:blue'>#define</span><span
lang=EN-US> </span><span lang=EN-US style='color:#A000A0'>…_CLASS_ID&nbsp;&nbsp;
</span><span lang=EN-US style='color:blue'>Class_ID</span><span lang=EN-US>(</span><span
lang=EN-US style='color:red'>0x…</span><span lang=EN-US>, </span><span
lang=EN-US style='color:red'>0x…</span><span lang=EN-US>)</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>Class_ID </span>값은<span lang=EN-US> Guid
Number </span>를 직접 조합해서 만들어도 되고 맥스<span lang=EN-US> SDK</span>가 설치된 하위 폴더<span
lang=EN-US> help </span>아래<span lang=EN-US> gencid.exe(&quot;</span>맥스<span
lang=EN-US> SDK </span>폴더<span lang=EN-US>\help\gencid.exe&quot;) </span>파일이 있습니다<span
lang=EN-US>. </span>이것을 실행하고<span lang=EN-US> New Class ID </span>버튼을 누르고<span
lang=EN-US> Copy To Clipboard </span>버튼을 누른 다음<span lang=EN-US> Class_ID </span>위에<span
lang=EN-US> &quot;Ctrl+V&quot; </span>키를 누르면 새로운 값이 붙여집니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>다음으로 확장자를 반환하는 <span lang=EN-US style='color:#880000'>Ext</span><span
lang=EN-US>(</span><span lang=EN-US style='color:blue'>int</span><span
lang=EN-US> n) </span>함수도 자신이 정한 이름에 맞게 고칩니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:blue'>const</span><span
lang=EN-US> </span><span lang=EN-US style='color:blue'>TCHAR</span><span
lang=EN-US> *</span><span lang=EN-US style='color:blue'>LcMax</span><span
lang=EN-US>::</span><span lang=EN-US style='color:#880000'>Ext</span><span
lang=EN-US>(</span><span lang=EN-US style='color:blue'>int</span><span
lang=EN-US> n)</span></p>

<p class=MsoNormal><span lang=EN-US>{</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> _T(</span><span
lang=EN-US style='color:fuchsia'>&quot;acm&quot;</span><span lang=EN-US>);</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>빌드 후 실행하고<span lang=EN-US> Menu </span><span lang=EN-US
style='font-family:Wingdings'>&agrave;</span><span lang=EN-US> &quot;File&quot; </span><span
lang=EN-US style='font-family:Wingdings'>&agrave;</span><span lang=EN-US> &quot;Export…&quot;
</span>를 진행 하면 다음 그림처럼 <span lang=EN-US>Export</span>할 준비가 되어 있음을 볼 수 있습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=361 height=152
src="https://github.com/3dapi/bs25_shader1/raw/master/dv01_max.files/image012.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>다른 프로젝트를 바꾸어 사용할 때<span
lang=EN-US>: <a href="https://github.com/3dapi/dv01_max/raw/master/mxp01_lcmax.zip">mxp01_lcmax.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:14.0pt'>5.1.3 ASE </span><span
style='font-size:14.0pt'>프로젝트 수정</span></p>

<p class=MsoNormal>맥스<span lang=EN-US> SDK</span>가 설치된 폴더에서<span lang=EN-US>
&quot;samples&quot; </span>폴더에는 다양한 플러그인 예제들이 있습니다<span lang=EN-US>. </span>이중에서<span
lang=EN-US> &quot;</span>맥스<span lang=EN-US> SDK </span>폴더<span lang=EN-US>\samples\import_export\asciiexp&quot;
</span>에는 여러분에게 친숙한<span lang=EN-US> ASE </span>파일을 만드는 예제가 있습니다<span
lang=EN-US>. &quot;asciiexp.vcproj&quot; </span>프로젝트를 열고 변환을 시도하면 다음과 같은 에러에 대한
메시지를 볼 수 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&quot;</span>구문을 분석하는 동안 다음과 같은 오류가 발생했습니다<span
lang=EN-US>.&quot;</span></p>

<p class=MsoNormal><span lang=EN-US>&quot;</span>파일<span lang=EN-US>:
D:\_3dsMax8\maxsdk\samples\import_export\asciiexp\asciiexp.vcproj </span>줄<span
lang=EN-US>: 204 </span>열<span lang=EN-US>: 22 </span>오류 메시지<span lang=EN-US>: </span>부모
요소<span lang=EN-US> 'Configuration'</span>의 콘텐츠 모델에 따르면<span lang=EN-US>
'IntelOptions'</span>은<span lang=EN-US>(</span>는<span lang=EN-US>) </span>예기치 않은
요소입니다<span lang=EN-US>.&quot;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이 메시지지는 전에도 본적이 있는 메시지 입니다<span lang=EN-US>. asciiexp.vcproj
</span>파일을 메모장이나<span lang=EN-US> Edit plus</span>등으로 열어서 해당 열을 삭제합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&quot;</span>맥스<span lang=EN-US> SDK </span>폴더<span
lang=EN-US>\help\ gencid.exe&quot;</span>를 실행해서 새로운<span lang=EN-US> ID</span>를<span
lang=EN-US> asciiexp.cpp</span>파일의 상단에 대략<span lang=EN-US> 25</span>라인에 있는 <span
lang=EN-US style='color:blue'>Class_ID</span><span lang=EN-US> </span>를 새로운 아이디로
바꾸어 줍니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>asciiexp.cpp</span>파일의<span lang=EN-US> 135
</span>라인 근처의 <span lang=EN-US>Ext(int n) </span>함수의 반환을<span lang=EN-US> ASE</span>와
구분하기 위해서 다음과 같이<span lang=EN-US> asd</span>로 바꾸어 줍니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>const</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>TCHAR</span><span lang=EN-US> * AsciiExp::</span><span
lang=EN-US style='color:#880000'>Ext</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>int</span><span lang=EN-US> n)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>switch</span><span lang=EN-US>(n) {</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>case</span><span lang=EN-US> </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>:</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> </span><span
lang=EN-US style='color:#A000A0'>_T</span><span lang=EN-US>(</span><span
lang=EN-US style='color:fuchsia'>&quot;asd&quot;</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> </span><span
lang=EN-US style='color:#A000A0'>_T</span><span lang=EN-US>(</span><span
lang=EN-US style='color:fuchsia'>&quot;&quot;</span><span lang=EN-US>);</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>마지막으로 프로젝트의 플러그인이 출력할 폴더를 변경합니다<span lang=EN-US>. </span>메뉴 <span
lang=EN-US style='font-family:Wingdings'>&agrave;</span><span lang=EN-US> </span>프로젝트 <span
lang=EN-US style='font-family:Wingdings'>&agrave;</span><span lang=EN-US> &quot;asciiexp&quot;
</span>속성을 열어서</p>

<p class=MsoNormal><span lang=EN-US>&quot;..\..\..\..\maxsdk\plugin\asciiexp.dle&quot;
</span>부분을<span lang=EN-US> &quot;..\..\..\..\plugins\asciiexp.dle&quot; </span>으로
변경합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&quot;maxsdk\plugin&quot; </span>그대로 두면 컴파일
한 후에 다시 플러그인을 옮겨야 합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=414 height=189
src="https://github.com/3dapi/bs25_shader1/raw/master/dv01_max.files/image013.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>수정된<span lang=EN-US> ase: </span>출력
경로 변경<span lang=EN-US>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>리소스 뷰를 열어<span lang=EN-US> IDD_ASCIIEXPORT_DLG</span>에 테스트로 다음과
같이 버튼을 추가해 봅시다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=336 height=199
src="https://github.com/3dapi/bs25_shader1/raw/master/dv01_max.files/image014.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>리소스 뷰<span lang=EN-US>: </span>다이얼로드
수정<span lang=EN-US>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>컴파일 한 다음 실행하고 나서 맥스에서 파일이<span lang=EN-US> Export</span>가 되는지
간단한 박스 한 개를 그립니다<span lang=EN-US>. </span>그리고 나서 메뉴 <span lang=EN-US
style='font-family:Wingdings'>&agrave;</span><span lang=EN-US> </span>파일 <span
lang=EN-US style='font-family:Wingdings'>&agrave;</span><span lang=EN-US> Export </span>를
선택하면 <span lang=EN-US>ASD</span>를 선택할 수 있고 다음과 같이 저장해 봅니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=362 height=146
src="https://github.com/3dapi/bs25_shader1/raw/master/dv01_max.files/image015.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;Export </span>파일 저장<span lang=EN-US>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이렇게 하면 이전에 리소스 뷰에서 수정한 다이얼로그 화면이 나타나고<span lang=EN-US> OK </span>버튼을
누르면 확장자가<span lang=EN-US> asd</span>가 붙은 파일이 생성이 됩니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&quot;</span>맥스 폴더<span lang=EN-US>\stdplugs&quot;
</span>에는 기본적으로 제공되는 맥스 플러그인이 있습니다<span lang=EN-US>. </span>여기에<span
lang=EN-US> 3ds</span>와<span lang=EN-US> ase</span>도 같이 있습니다<span lang=EN-US>. </span>이들을
다른 곳으로 옮겨 놓으면<span lang=EN-US> Export </span>선택에서 지워집니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>만약<span lang=EN-US> asciexp </span>프로젝트를 다른 곳으로 옮겨서 사용하려면 속성을
열어서<span lang=EN-US> C/C++ </span>일반 <span lang=EN-US style='font-family:Wingdings'>&agrave;</span><span
lang=EN-US> </span>추가 포함 디렉토리가 상대적으로 설정되어있는 것을 절대적으로 바꾸어 줍니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&quot;..\..\..\include&quot; </span><span
lang=EN-US style='font-family:Wingdings'>&agrave;</span><span lang=EN-US> &quot;</span>맥스<span
lang=EN-US> SDK </span>폴더<span lang=EN-US>\include&quot;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>링커 <span lang=EN-US style='font-family:Wingdings'>&agrave;</span><span
lang=EN-US> </span>일반 <span lang=EN-US style='font-family:Wingdings'>&agrave;</span><span
lang=EN-US> &quot;</span>출력 파일 위치<span lang=EN-US>&quot;</span>를 변경합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=PT-BR>&quot;..\..\..\..\plugins\asciiexp.dle&quot;
</span><span lang=EN-US style='font-family:Wingdings'>&agrave;</span><span lang=EN-US>
</span><span lang=PT-BR>&quot;D:\_3dsMax8\plugins\asciiexp.dle&quot;</span></p>

<p class=MsoNormal><span lang=PT-BR>&nbsp;</span></p>

<p class=MsoNormal>링커 <span lang=EN-US style='font-family:Wingdings'>&agrave;</span><span
lang=EN-US> </span>입력 <span lang=EN-US style='font-family:Wingdings'>&agrave;</span><span
lang=EN-US> &quot;</span>추가 종속성<span lang=EN-US>&quot;</span>에 라이브러리를 추가합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&quot;odbc32.lib odbccp32.lib comctl32.lib&quot;</span></p>

<p class=MsoNormal style='text-indent:20.0pt'><span lang=EN-US
style='font-family:Wingdings'>&agrave;</span><span lang=EN-US> &quot;odbc32.lib
odbccp32.lib comctl32.lib core.lib geom.lib maxutil.lib mesh.lib&quot;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>리소스 <span lang=EN-US style='font-family:Wingdings'>&agrave;</span><span
lang=EN-US> </span>일반 <span lang=EN-US style='font-family:Wingdings'>&agrave;</span><span
lang=EN-US> &quot;</span>추가 포함 디렉토리<span lang=EN-US>&quot;</span>를 변경합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&quot;..\..\..\include&quot; </span><span
lang=EN-US style='font-family:Wingdings'>&agrave;</span><span lang=EN-US> &quot;</span>맥스<span
lang=EN-US> SDK </span>폴더<span lang=EN-US>\include&quot;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>솔루션 탐색기에서<span lang=EN-US> Libraries</span>를 전부 삭제합니다<span
lang=EN-US>. </span>이 라이브러리들은 링커의 라이브러리 추가 종속성에 이미 포함시켰습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&quot;</span>맥스 폴더<span lang=EN-US>\plugins&quot;
</span>에서 이전에 연습으로 작성한 플러그인 들을 전부 정리하고 수정된<span lang=EN-US> asciiexp</span>를 컴파일
해서 이곳에 새로 생성이 되는지 확인합니다<span lang=EN-US>. </span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=153 height=115
src="https://github.com/3dapi/bs25_shader1/raw/master/dv01_max.files/image016.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>프로젝트에 포함된 솔루션 라이브러리 삭제<span
lang=EN-US>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=PT-BR><a href="https://github.com/3dapi/dv01_max/raw/master/mxp01_modified_ase.zip">mxp01_modified_ase.zip</a></span>은<span
lang=PT-BR> asciiexp</span>의 프로젝트 이름과 파일 이름 등을 수정한 예제입니다<span lang=PT-BR>.</span></p>

<p class=MsoNormal>간단한 플러그인이라면<span lang=PT-BR> ase </span>프로젝트를 정리해서 사용하는 것이 가장
무난합니다<span lang=PT-BR>. ase</span>는 강체 애니메이션<span lang=PT-BR>(Rigid Body
Animation)</span>으로 구성되어 있습니다<span lang=PT-BR>. </span>만약 스키닝을 추출하려면<span
lang=PT-BR> ase</span>와 다르게 구성해야 합니다<span lang=PT-BR>. </span>먼저<span
lang=PT-BR> ase</span>에서 사용된 데이터 추출과 애니메이션을 구현해 보고 이후에<span lang=PT-BR> Skinng</span>을
구현해 봅시다<span lang=PT-BR>.</span></p>

<p class=MsoNormal><span lang=PT-BR>&nbsp;</span></p>

<p class=MsoNormal><span lang=PT-BR>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:14.0pt'>5.1.4 Wrapper </span><span
style='font-size:14.0pt'>플러그인</span></p>

<p class=MsoNormal>맥스는 프로그램을 시작할 때 플러그인을 전부 로드 하고 있습니다<span lang=EN-US>. </span>따라서
플러그인을 지우거나 교체하려면 맥스를 중지 시켜야 합니다<span lang=EN-US>. </span>이것은 자주 디버딩 해야 하는 플러그인 제작에서는
상당히 불편합니다<span lang=EN-US>. </span>이 문제로 고생하다가 <span lang=EN-US>Tom Hudson </span>라는
분이 플러그인을<span lang=EN-US> Wrapping </span>하는 방법을 인터넷에 아이디어와 코드를 올려놓았습니다<span
lang=EN-US>. </span>다음의 내용은 <span lang=EN-US>Tom Hudson</span>이 만든 것을 정리한 것입니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><a href="https://github.com/3dapi/dv01_max/raw/master/mxp01_lcmax.zip">mxp01_lcmax.zip</a>
</span>에서 생성자 <span lang=EN-US>LcMax </span>클래스의 생성자 함수<span lang=EN-US>, </span>소멸자
함수<span lang=EN-US>, Ext() </span>함수<span lang=EN-US>, DoExport()</span>함수에 다음과
같은 메시지 창을 넣고 디버그로 실행해 봅시다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>LcMax</span><span lang=EN-US>::</span><span lang=EN-US
style='color:blue'>LcMax</span><span lang=EN-US>()</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span style='color:red'>●</span><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span lang=EN-US
style='color:#A000A0'>MessageBox</span><span lang=EN-US>(</span><span
lang=EN-US style='color:#A000A0'>NULL</span><span lang=EN-US>, </span><span
lang=EN-US style='color:fuchsia'>&quot;Constructor LcMax&quot;</span><span
lang=EN-US>, </span><span lang=EN-US style='color:fuchsia'>&quot;Message&quot;</span><span
lang=EN-US>, </span><span lang=EN-US style='color:red'>0</span><span
lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>}</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>LcMax</span><span lang=EN-US>::~</span><span lang=EN-US
style='color:blue'>LcMax</span><span lang=EN-US>() </span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span style='color:red'>●</span><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span lang=EN-US
style='color:#A000A0'>MessageBox</span><span lang=EN-US>(</span><span
lang=EN-US style='color:#A000A0'>NULL</span><span lang=EN-US>, </span><span
lang=EN-US style='color:fuchsia'>&quot;Destroyer LcMax&quot;</span><span
lang=EN-US>, </span><span lang=EN-US style='color:fuchsia'>&quot;Message&quot;</span><span
lang=EN-US>, </span><span lang=EN-US style='color:red'>0</span><span
lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>}</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>const</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>TCHAR</span><span lang=EN-US> *</span><span lang=EN-US
style='color:blue'>LcMax</span><span lang=EN-US>::</span><span lang=EN-US
style='color:#880000'>Ext</span><span lang=EN-US>(</span><span lang=EN-US
style='color:blue'>int</span><span lang=EN-US> </span><span lang=EN-US>n</span><span
lang=EN-US>)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span style='color:red'>●</span><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span lang=EN-US
style='color:#A000A0'>MessageBox</span><span lang=EN-US>(</span><span
lang=EN-US style='color:#A000A0'>NULL</span><span lang=EN-US>, </span><span
lang=EN-US style='color:fuchsia'>&quot;Constructor LcMax&quot;</span><span
lang=EN-US>, </span><span lang=EN-US style='color:fuchsia'>&quot;Message&quot;</span><span
lang=EN-US>, </span><span lang=EN-US style='color:red'>0</span><span
lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> </span><span
lang=EN-US style='color:#A000A0'>_T</span><span lang=EN-US>(</span><span
lang=EN-US style='color:fuchsia'>&quot;acm&quot;</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>}</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>int</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>LcMax</span><span lang=EN-US>::</span><span
lang=EN-US style='color:#880000'>DoExport</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>…</span><span lang=EN-US>)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span style='color:red'>●</span><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span lang=EN-US
style='color:#A000A0'>MessageBox</span><span lang=EN-US>(</span><span
lang=EN-US style='color:#A000A0'>NULL</span><span lang=EN-US>, </span><span
lang=EN-US style='color:fuchsia'>&quot;Do Export LcMax&quot;</span><span
lang=EN-US>, </span><span lang=EN-US style='color:fuchsia'>&quot;Message&quot;</span><span
lang=EN-US>, </span><span lang=EN-US style='color:red'>0</span><span
lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>}</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>맥스에서 박스를 하나 그리고 파일 <span
lang=EN-US style='font-family:Wingdings'>&agrave;</span><span lang=EN-US> Export</span>를
선택합니다<span lang=EN-US>. </span>그러면<span lang=EN-US> LcMax </span>클래스의 생성자의 브레이크
포인터에 프로세스가 걸립니다<span lang=EN-US>. </span>또 진행 하면<span lang=EN-US> Ext() </span>함수에서<span
lang=EN-US>, </span>그리고 다시 진행하면 소멸자에서 프로세스가 진행됨을 알 수 있습니다<span lang=EN-US>. </span>이
동작은<span lang=EN-US> Export</span>를 선택할 때 맥스가 플러그인들의 이름을 얻는 과정인 것을 알 수 있습니다<span
lang=EN-US>. </span>저장할 이름을 선택하고 계속하면 생성자 <span lang=EN-US style='font-family:
Wingdings'>&agrave;</span><span lang=EN-US> DoExport() </span><span lang=EN-US
style='font-family:Wingdings'>&agrave;</span><span lang=EN-US> </span>소멸자로 프로세스가 진행됨을 볼
수 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'>이 두 동작을 정리하면 맥스는 플러그인을 프로그램에서 로드하고
있고 만약<span lang=EN-US> Export</span>가 요청이 되면 <span lang=EN-US style='color:
blue'>SceneExport </span>클래스를 상속받은 객체의 생성자 <span lang=EN-US style='font-family:
Wingdings'>&agrave;</span><span lang=EN-US> </span>작업에 필요한 함수 호출 <span lang=EN-US
style='font-family:Wingdings'>&agrave;</span><span lang=EN-US> </span>소멸자를 반복한다고 할 수 있습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>앞서 맥스의 플러그인은<span lang=EN-US> DLL</span>이라고 했습니다<span
lang=EN-US>. Wrapper </span>플러그인의 작동 순서는 작업 요청이 오면 그 작업에 해당하는<span lang=EN-US>
Child </span>플러그인을 로드 하고<span lang=EN-US> Child </span>플러그인의 작업을 실행한 다음<span
lang=EN-US>, </span>소멸자에서<span lang=EN-US> Child DLL</span>을 해제합니다<span
lang=EN-US>. </span>이것을 그림으로 표현하면 다음과 같습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=612 height=246
src="https://github.com/3dapi/bs25_shader1/raw/master/dv01_max.files/image017.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>맥스에 사용되는 플러그인<span lang=EN-US>: </span>일반적인
플러그인과 <span lang=EN-US>Wrapper </span>플러그인<span lang=EN-US>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>Wrapper </span>플러그인을 만들기 위해서 <span
lang=EN-US>LcMax </span>플러그인의 이름을<span lang=EN-US> LcWrapper</span>로 바꿉니다<span
lang=EN-US>. </span>다음으로 테스트를 위해 <span lang=EN-US>&quot;plugins&quot; </span>폴더에
있던<span lang=EN-US> &quot;asdexp.dle&quot; C </span>드라이브 루트로 옮겨 놓았습니다<span
lang=EN-US>. </span>이 플러그인을<span lang=EN-US> LcWrapper </span>플러그인이 래핑<span
lang=EN-US>(Wrapping)</span>할 것입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>LcWrapper </span>클래스는 다음과 같이 <span
lang=EN-US>3 </span>개의 멤버 변수를 추가합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>class LcWrapper : public SceneExport</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; HINSTANCE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_hInst;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// DLL Instance</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ClassDesc*&nbsp;&nbsp;&nbsp;&nbsp; m_pChildDesc;&nbsp; </span><span
lang=EN-US style='color:green'>// DLL </span><span style='color:green'>에서 얻은<span
lang=EN-US> Child </span>객체 주소</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SceneExport*&nbsp;&nbsp; m_pChild;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Export</span><span style='color:green'>에 요청되는
작업을 담당할 객체</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>m_pChildDesc </span>변수는<span lang=EN-US>
DLL</span>에서 얻은 <span lang=EN-US>ClassDesc2 </span>클래스를 상속받은 객체의 주소입니다<span
lang=EN-US>. </span>이 객체의<span lang=EN-US>&nbsp; Create()</span>함수를 이용해서 <span
lang=EN-US>m_pChild </span>객체를 생성합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이것을 구체적으로 구현하면 <span lang=EN-US>LcWrapper </span>클래스의 생성자는 래핑
대상 플러그인<span lang=EN-US>(DLL)</span>을 로드하기 위해<span lang=EN-US> LoadLibray()</span>함수를
사용합니다<span lang=EN-US>. </span>다음으로 <span lang=EN-US>GetProcAddress() </span>함수를
이용해서 <span lang=EN-US>ClassDesc </span>객체의 주소를 얻어옵니다<span lang=EN-US>. </span>마지막으로
<span lang=EN-US>ClassDesc </span>클래스의<span lang=EN-US> Create()</span>함수를 호출해서
<span lang=EN-US>SceneExport </span>객체를 생성합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>LcWrapper</span><span lang=EN-US>::</span><span lang=EN-US
style='color:blue'>LcWrapper</span><span lang=EN-US>()</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='text-indent:40.0pt;word-break:keep-all'><span
lang=EN-US>m_hInst&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = </span><span
lang=EN-US style='color:#A000A0'>NULL</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_pChildDesc&nbsp;&nbsp; =
</span><span lang=EN-US style='color:#A000A0'>NULL</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_pChild&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; =
</span><span lang=EN-US style='color:#A000A0'>NULL</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Load Plugin(DLL)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_hInst
= </span><span lang=EN-US style='color:#880000'>LoadLibrary</span><span
lang=EN-US>( </span><span lang=EN-US style='color:fuchsia'>&quot;c:/asdexp.dle&quot;</span><span
lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US> (!m_hInst)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>MessageBox</span><span lang=EN-US>(</span><span
lang=EN-US style='color:#A000A0'>NULL</span><span lang=EN-US>, </span><span
lang=EN-US style='color:fuchsia'>&quot;Load c:/asdexp.dle Failed&quot;</span><span
lang=EN-US>, </span><span lang=EN-US style='color:fuchsia'>&quot;Err&quot;</span><span
lang=EN-US>, </span><span lang=EN-US style='color:#A000A0'>MB_ICONWARNING</span><span
lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_hInst =
</span><span lang=EN-US style='color:#A000A0'>NULL</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// DLL</span><span style='color:green'>에서 제공하는 함수
중 <span lang=EN-US>Export</span>를 생성할 수 있는 객체 주소 반환 함수 얻기</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>typedef</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>ClassDesc</span><span lang=EN-US>* (</span><span
lang=EN-US style='color:blue'>__stdcall</span><span lang=EN-US> *</span><span
lang=EN-US style='color:blue'>_LibClassDesc</span><span lang=EN-US>)(</span><span
lang=EN-US style='color:blue'>int</span><span lang=EN-US> i);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>_LibClassDesc</span><span lang=EN-US> pLibClassDesc</span></p>

<p class=MsoNormal style='margin-left:40.0pt;text-indent:40.0pt;word-break:
keep-all'><span lang=EN-US>&nbsp;= (</span><span lang=EN-US style='color:blue'>_LibClassDesc</span><span
lang=EN-US>) </span><span lang=EN-US style='color:#880000'>GetProcAddress</span><span
lang=EN-US>(m_hInst, </span><span lang=EN-US style='color:fuchsia'>&quot;LibClassDesc&quot;</span><span
lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US> (pLibClassDesc)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_pChildDesc
= </span><span lang=EN-US style='color:#880000'>pLibClassDesc</span><span
lang=EN-US>(</span><span lang=EN-US style='color:red'>0</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Export</span><span style='color:green'>를 담당할 객체
생성</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_pChild
= (</span><span lang=EN-US style='color:blue'>SceneExport</span><span
lang=EN-US>*)m_pChildDesc-&gt;</span><span lang=EN-US style='color:#880000'>Create</span><span
lang=EN-US>();</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>DLL</span>의<span lang=EN-US> .def </span>파일에
있는<span lang=EN-US> EXPORTS </span>섹션에 <span lang=EN-US>&quot;LibClassDesc @3&quot;</span>로
정의되어 있어 함수의 이름대신 숫자로 대신해도 됩니다<span lang=EN-US>. </span>숫자를 사용하면 처리가 좀 더 빨라진다고 합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#880000'>GetProcAddress</span><span
lang=EN-US>(m_hInst, (</span><span lang=EN-US style='color:blue'>LPCSTR</span><span
lang=EN-US>)</span><span lang=EN-US style='color:red'>3</span><span lang=EN-US>);</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>소멸자는 생성자에서 만들어진 <span lang=EN-US style='color:blue'>SceneExport</span><span
lang=EN-US> </span>객체<span lang=EN-US> m_pChild</span>를 먼저 해제 하고 플러그인을 해제합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>LcWrapper</span><span lang=EN-US>::~</span><span lang=EN-US
style='color:blue'>LcWrapper</span><span lang=EN-US>() </span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>(m_pChild)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>delete</span><span lang=EN-US> m_pChild;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_pChild
= </span><span lang=EN-US style='color:#A000A0'>NULL</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Plugin </span><span style='color:green'>해제</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>(m_hInst)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>FreeLibrary</span><span lang=EN-US>(m_hInst);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_hInst
= </span><span lang=EN-US style='color:#A000A0'>NULL</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>가장 중요한 함수<span lang=EN-US> DoExport() </span>함수를 다음과 같이 수정합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>int</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>LcWrapper</span><span lang=EN-US>::</span><span
lang=EN-US style='color:#880000'>DoExport</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>const</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>TCHAR</span><span lang=EN-US> *name,</span><span
lang=EN-US style='color:blue'>ExpInterface</span><span lang=EN-US> *ei</span></p>

<p class=MsoNormal style='margin-left:80.0pt;text-indent:40.0pt;word-break:
keep-all'><span lang=EN-US>,</span><span lang=EN-US style='color:blue'>Interface</span><span
lang=EN-US> *i, </span><span lang=EN-US style='color:blue'>BOOL</span><span
lang=EN-US> suppressPrompts, </span><span lang=EN-US style='color:blue'>DWORD</span><span
lang=EN-US> options)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>(m_pChild)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> m_pChild-&gt;</span><span
lang=EN-US style='color:#880000'>DoExport</span><span lang=EN-US>(name, ei, i,
suppressPrompts, options);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> </span><span
lang=EN-US style='color:#A000A0'>FALSE</span><span lang=EN-US>;</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이런 방식으로 나머지 함수들도 전부 바꾸어 줍니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>const</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>TCHAR</span><span lang=EN-US> *</span><span lang=EN-US
style='color:blue'>LcWrapper</span><span lang=EN-US>::</span><span lang=EN-US
style='color:#880000'>Ext</span><span lang=EN-US>(</span><span lang=EN-US
style='color:blue'>int</span><span lang=EN-US> n)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>(m_pChild)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> m_pChild-&gt;</span><span
lang=EN-US style='color:#880000'>Ext</span><span lang=EN-US>(n);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> </span><span
lang=EN-US style='color:#A000A0'>_T</span><span lang=EN-US>(</span><span
lang=EN-US style='color:fuchsia'>&quot;Failed Ext&quot;</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=360 height=135
src="https://github.com/3dapi/bs25_shader1/raw/master/dv01_max.files/image018.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;Wrapper Plugin: <a
href="https://github.com/3dapi/dv01_max/raw/master/mxp01_wrapper.zip">mxp01_wrapper.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>전체 코드는 <span lang=EN-US><a href="https://github.com/3dapi/dv01_max/raw/master/mxp01_wrapper.zip">mxp01_wrapper.zip</a></span>을
참고 하기 바랍니다<span lang=EN-US>. </span>래핑이 제대로 되고 있는지 확인하기 위해서 다음과 같이 만들어 보았습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>const</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>TCHAR</span><span lang=EN-US> *</span><span lang=EN-US
style='color:blue'>LcWrapper</span><span lang=EN-US>::</span><span lang=EN-US
style='color:#880000'>ShortDesc</span><span lang=EN-US>()</span></p>

<p class=MsoNormal style='text-indent:40.0pt;word-break:keep-all'><span
lang=EN-US style='color:blue'>static</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>TCHAR</span><span lang=EN-US> s[</span><span
lang=EN-US style='color:red'>1024</span><span lang=EN-US>];</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>(m_pChild)&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>_stprintf</span><span lang=EN-US>(s, </span><span
lang=EN-US style='color:fuchsia'>&quot;Wrap(%s)&quot;</span><span lang=EN-US>,
m_pChild-&gt;</span><span lang=EN-US style='color:#880000'>ShortDesc</span><span
lang=EN-US>());</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>else</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>_stprintf</span><span lang=EN-US>(s, _T(</span><span
lang=EN-US style='color:fuchsia'>&quot;Failed to load Wrap&quot;</span><span
lang=EN-US>));</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> s;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:16.0pt'>5.2 Data Export</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:14.0pt'>5.2.1 Node Export</span></p>

<p class=MsoNormal>맥스는 모든 객체를 노드<span lang=EN-US>(Node)</span>로 관리합니다<span
lang=EN-US>. </span>이 노드는 다음 그림과 같이 나무 자료 구조<span lang=EN-US>(Tree Data
Structure)</span>로 구성되어 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=492 height=172
src="https://github.com/3dapi/bs25_shader1/raw/master/dv01_max.files/image019.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>나무 자료 구조<span lang=EN-US>(Tree
Data Structure)&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>맥스는<span lang=EN-US> INode </span>라는 인터페이스를 제공하며<span
lang=EN-US> INode </span>인터페이스 의 여러 함수 중에서 <span lang=EN-US>NumberOfChildren(),
GetChildNode(index), GetParentNode(), GetParentNode() </span>함수 등으로 하위노드 숫자<span
lang=EN-US>, </span>하위 노드<span lang=EN-US>, </span>부모 노드<span lang=EN-US>, Root
</span>노드 등을 찾을 수 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>맥스는<span lang=EN-US> Exporter </span>명령이 주어지면 <span
lang=EN-US style='color:blue'>SceneExport</span><span lang=EN-US> </span>클래스를 상속받은
클래스 멤버 함수 중에서 <span lang=EN-US>DoExport() </span>함수의 세 번째 인수인 <span lang=EN-US
style='color:blue'>Interface</span><span lang=EN-US>* </span>객체의<span
lang=EN-US> GetRootNode() </span>함수를 이용해서 <span lang=EN-US>Root Node</span>를 얻을
수 있습니다<span lang=EN-US>. </span>간단하게<span lang=EN-US> Root Node</span>와 이름<span
lang=EN-US>, </span>하위노드들을 찾는다면 다음과 같이 코딩 하면 됩니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:blue'>int LcMax</span><span
lang=EN-US>::</span><span lang=EN-US style='color:#880000'>DoExport</span><span
lang=EN-US>(…,</span><span lang=EN-US style='color:blue'>Interface</span><span
lang=EN-US> *pi,…)</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>INode</span><span lang=EN-US>*&nbsp; pRoot = m_pI-&gt;</span><span
lang=EN-US style='color:#880000'>GetRootNode</span><span lang=EN-US>();</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>TCHAR</span><span lang=EN-US>*&nbsp; sName&nbsp; =
pRoot-&gt;</span><span lang=EN-US style='color:#880000'>GetName</span><span
lang=EN-US>();</span></p>

<p class=MsoNormal><span lang=EN-US style='color:blue'>INT</span><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; nChild = pRoot-&gt;</span><span lang=EN-US
style='color:#880000'>NumberOfChildren</span><span lang=EN-US>();</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이것을 실행하면 맥스의<span lang=EN-US> Root Node </span>이름은<span
lang=EN-US> &quot;Scene Root&quot;</span>로 출력이 됩니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>만약 맥스에 작업한 모든<span lang=EN-US> Node</span>를<span lang=EN-US>
Export</span>할 때는<span lang=EN-US> Scene Root</span>부터 하위 노드<span lang=EN-US>(Child
Node)</span>들을 재귀<span lang=EN-US>(Recursive) </span>순환을 적용해서 찾아야 합니다<span
lang=EN-US>. </span>이를 위해서 먼저 다음과 같이<span lang=EN-US> INode </span>객체 주소를 저장 하기
위해<span lang=EN-US> STL</span>의 벡터 컨테이너를 선언합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:blue'>std</span><span
lang=EN-US>::</span><span lang=EN-US style='color:blue'>vector</span><span
lang=EN-US>&lt;</span><span lang=EN-US style='color:blue'>INode</span><span
lang=EN-US>*&gt;&nbsp;&nbsp;&nbsp; m_vMaxNode;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>맥스의 노드 자료구조</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>그리고 다음과 같은 재귀 함수를 이용해서 이 벡터 컨테이너에 노드의 주소를 저장합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>void</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>LcMax</span><span lang=EN-US>::</span><span lang=EN-US
style='color:#880000'>GatherNode</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>INode</span><span lang=EN-US>* pNode)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>(!pNode)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>INT</span><span lang=EN-US> iChild = pNode-&gt;</span><span
lang=EN-US style='color:#880000'>NumberOfChildren</span><span lang=EN-US>();</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>for</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>int</span><span lang=EN-US> i=</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>; i&lt;iChild; ++i)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>INode</span><span lang=EN-US>* pChild =
pNode-&gt;</span><span lang=EN-US style='color:#880000'>GetChildNode</span><span
lang=EN-US>(i);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>(pChild)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>GatherNode</span><span lang=EN-US>(pChild);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이 방식은 깊이 우선 탐색 방식<span lang=EN-US>(DFS)</span>입니다<span
lang=EN-US>. </span>이렇게 노드를 모으고 이것을 파일로 저장합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>FILE</span><span lang=EN-US>*&nbsp;&nbsp; fp = </span><span
lang=EN-US style='color:#880000'>fopen</span><span lang=EN-US>(m_sN, </span><span
lang=EN-US style='color:fuchsia'>&quot;wt&quot;</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>INode</span><span lang=EN-US>*&nbsp; pRoot = m_pI-&gt;</span><span
lang=EN-US style='color:#880000'>GetRootNode</span><span lang=EN-US>();</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:#880000'>GatherNode</span><span lang=PT-BR>(pRoot);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:blue'>for</span><span lang=PT-BR>(n =</span><span lang=PT-BR
style='color:red'>0</span><span lang=PT-BR>; n&lt;m_vMaxNode.</span><span
lang=PT-BR style='color:#880000'>size</span><span lang=PT-BR>(); ++n)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=PT-BR style='color:blue'>INode</span><span lang=PT-BR>*</span><span
lang=EN-US>&nbsp; </span><span lang=PT-BR>pNode = m_vMaxNode[n];</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>TCHAR</span><span lang=EN-US>*&nbsp; sName&nbsp;
= pNode-&gt;</span><span lang=EN-US style='color:#880000'>GetName</span><span
lang=EN-US>();</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>INT</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; nChild
= pNode-&gt;</span><span lang=EN-US style='color:#880000'>NumberOfChildren</span><span
lang=EN-US>();</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:40.0pt;word-break:keep-all'><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>(pRoot == pNode-&gt;</span><span
lang=EN-US style='color:#880000'>GetParentNode</span><span lang=EN-US>())</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>fprintf</span><span lang=EN-US>(fp, </span><span
lang=EN-US style='color:fuchsia'>&quot;\n&quot;</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>fprintf</span><span lang=EN-US>(fp, </span><span
lang=EN-US style='color:fuchsia'>&quot;Node Name: %s, Child Number: %d\n&quot;</span><span
lang=EN-US>, sName, nChild);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>}</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#880000'>fclose</span><span
lang=EN-US>(fp);</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>프로그램을 완전하기 위해 리소스 뷰에서 다이얼로그에 다음과 같은 버튼을 만듭니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=264 height=183
src="https://github.com/3dapi/bs25_shader1/raw/master/dv01_max.files/image020.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>또한<span lang=EN-US> DoExport</span>버튼을 누르면<span lang=EN-US>
Export</span>가 실행되도록 다음과 같이 콜백 함수를 수정합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>INT_PTR</span><span lang=EN-US> </span><span lang=EN-US
style='color:#A000A0'>CALLBACK</span><span lang=EN-US> </span><span lang=EN-US
style='color:#880000'>LcMaxOptionsDlgProc</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>HWND</span><span lang=EN-US> hWnd,</span><span
lang=EN-US style='color:blue'>UINT</span><span lang=EN-US> uMsg,</span><span
lang=EN-US style='color:blue'>WPARAM</span><span lang=EN-US> wParam,</span><span
lang=EN-US style='color:blue'>LPARAM</span><span lang=EN-US> lParam)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>WPARAM</span><span lang=EN-US> wLoParam = </span><span
lang=EN-US style='color:#A000A0'>LOWORD</span><span lang=EN-US>(wParam);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>WPARAM</span><span lang=EN-US> wHiParam = </span><span
lang=EN-US style='color:#A000A0'>HIWORD</span><span lang=EN-US>(wParam);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>( </span><span
lang=EN-US style='color:#A000A0'>WM_INITDIALOG</span><span lang=EN-US> == uMsg)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>else</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>( </span><span
lang=EN-US style='color:#A000A0'>WM_COMMAND</span><span lang=EN-US> == uMsg)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>(imp &amp;&amp; </span><span
lang=EN-US style='color:#A000A0'>IDC_EXPORT</span><span lang=EN-US> ==
wLoParam)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; imp-&gt;m_bDoExport
= </span><span lang=EN-US style='color:#A000A0'>TRUE</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#A000A0'>SendMessage</span><span lang=EN-US>(hWnd, </span><span
lang=EN-US style='color:#A000A0'>WM_CLOSE</span><span lang=EN-US>, </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>, </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> </span><span
lang=EN-US style='color:#A000A0'>TRUE</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>다이얼로그에 버튼 추가와 메시지 처리에 대한 자세한 내용은<span
lang=EN-US> WinAPI</span>를 참고 하기 바랍니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'>이렇게 만든 코드를 테스트하기 위해서 다음과 같이 맥스를 실행하고
메뉴 <span lang=EN-US style='font-family:Wingdings'>&agrave;</span><span lang=EN-US>
Create </span><span lang=EN-US style='font-family:Wingdings'>&agrave;</span><span
lang=EN-US> System </span><span lang=EN-US style='font-family:Wingdings'>&agrave;</span><span
lang=EN-US> Biped</span>를 선택해서<span lang=EN-US> Biped </span>인형<span
lang=EN-US> 2</span>개를 화면에 그립니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US><img border=0
width=343 height=216 src="https://github.com/3dapi/bs25_shader1/raw/master/dv01_max.files/image021.gif"></span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&lt;Biped </span>추가<span
lang=EN-US>&gt;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>또는 우측의<span lang=EN-US> Create
Tab</span>에서 톱니바퀴 두 개가 물려 있는 버튼을 누르면<span lang=EN-US> Systems </span>버튼이 나오고 이중에서<span
lang=EN-US> Biped </span>버튼을 선택한 다음<span lang=EN-US> Biped</span>를 추가합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'>이<span lang=EN-US> Biped</span>는
맥스가 애니메이션을 편리하게 작성할 수 있도록 제공되는 유틸리티이며 나무 구조<span lang=EN-US>(Tree Structure)</span>로
구성되어 있습니다<span lang=EN-US>. </span>이<span lang=EN-US> Biped</span>의 노드를 파일로 저장할
수 있으면 나머지 맥스에서 구성된 오브젝트의 노드들도 같은 방법으로 파일에 저장할 수 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'>이렇게<span lang=EN-US> Biped 2</span>개를
만들고<span lang=EN-US> Export</span>한 다음 파일을 열어보면<span lang=EN-US> &quot;Scene
Root&quot; </span>부터<span lang=EN-US> &quot;Bip01&quot;, &quot; Bip02&quot;</span>로
시작하는 노드들이 모두 기록되어 있음을 볼 수 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>참고로 맥스의<span lang=EN-US> Schematic View</span>를 선택하면 현재 맥스에 있는
객체가 나타납니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=439 height=227
src="https://github.com/3dapi/bs25_shader1/raw/master/dv01_max.files/image022.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;Schematic View&gt;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>전체 코드는 <span lang=EN-US><a
href="https://github.com/3dapi/dv01_max/raw/master/mxp11_nodes.zip">mxp11_nodes.zip</a></span>를 참고 하기 바랍니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:14.0pt'>5.2.2 Object
Export</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>Root </span>노드를
제외한 모든 노드는<span lang=EN-US> Object</span>를 가지고 있습니다<span lang=EN-US>. </span>이<span
lang=EN-US> Object</span>는<span lang=EN-US> Node</span>의 역할이라 생각하면 됩니다<span
lang=EN-US>. </span>맥스의<span lang=EN-US> Object</span>는 시스템에서 파생된 <span
lang=EN-US>Derived Object</span>와 <span lang=EN-US>Procedural Object </span>두 종류가
있습니다<span lang=EN-US>. </span><span lang=EN-US>Derived Object</span>는 시스템의 한 부분으로서
변경이 불가능하며<span lang=EN-US> Procedural Object</span>는 카메라<span lang=EN-US>, </span>조명<span
lang=EN-US>, Helper, Geometry </span>등 수정이 가능한<span lang=EN-US> Object</span>입니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US><img border=0
width=319 height=227 src="https://github.com/3dapi/bs25_shader1/raw/master/dv01_max.files/image023.gif"></span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&lt;</span>맥스의 여러
종류<span lang=EN-US> Object&gt;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>노드의 역할을 알아보기 위해 다음과 같이<span
lang=EN-US> Object Type</span>을 확인합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>Object</span><span lang=EN-US>* pObject = pNode-&gt;</span><span
lang=EN-US style='color:#880000'>GetObjectRef</span><span lang=EN-US>();</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>if</span><span lang=EN-US>(pObject)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>SClass_ID</span><span lang=EN-US> lSuperID =
pObject-&gt;</span><span lang=EN-US style='color:#880000'>SuperClassID</span><span
lang=EN-US>();</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>Class_ID</span><span lang=EN-US> lClassID =
pObject-&gt;</span><span lang=EN-US style='color:#880000'>ClassID</span><span
lang=EN-US>();</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>(</span><span
lang=EN-US style='color:#A000A0'>GEOMOBJECT_CLASS_ID</span><span lang=EN-US> ==
lSuperID)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>( </span><span
lang=EN-US style='color:#A000A0'>BONE_OBJ_CLASSID</span><span lang=EN-US> ==
lClassID || </span><span lang=EN-US style='color:blue'>Class_ID</span><span
lang=EN-US>(</span><span lang=EN-US style='color:#A000A0'>BONE_CLASS_ID</span><span
lang=EN-US>, </span><span lang=EN-US style='color:red'>0</span><span
lang=EN-US>) == lClassID)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>else</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US>}</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>else</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>(</span><span
lang=EN-US style='color:#A000A0'>CAMERA_CLASS_ID</span><span lang=EN-US> ==
lSuperID)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>else</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>(</span><span
lang=EN-US style='color:#A000A0'>LIGHT_CLASS_ID</span><span lang=EN-US> ==
lSuperID)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>}</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>카메라<span lang=EN-US>, </span>조명<span
lang=EN-US>, Helper, Shape </span>등은 게임 내부에서 정한 데이터를 사용합니다<span lang=EN-US>. </span>따라서
이들은 특별한 경우가 아니라면 보통은 제외대상이며 우리의 주 관심은<span lang=EN-US> Geometry Object </span>입니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>Geometry Object</span>도<span lang=EN-US>
ClassID() </span>함수로 한 번 조사해야 할 내용이 있습니다<span lang=EN-US>. </span>애니메이션을 좀 더 편리하게
하기 위해서<span lang=EN-US> Bone, </span>또는<span lang=EN-US> Bipe</span>를 이용합니다<span
lang=EN-US>. </span>이들도 폴리곤이 있으며<span lang=EN-US> Geometry class </span>입니다<span
lang=EN-US>. Export</span>된 데이터를 확인하는<span lang=EN-US> Viewer </span>프로그램에서 애니메이션을
눈으로 살피기 위해<span lang=EN-US> Bone</span>을 화면에 표시하므로 적정한 정점 구조체와 포맷으로 이들도 추출해야 합니다<span
lang=EN-US>. Bone </span>처리에 대해서는 이후 애니메이션에서 다시 하겠습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>전체 코드는 <span lang=EN-US><a href="https://github.com/3dapi/dv01_max/raw/master/mxp12_object.zip">mxp12_object.zip</a></span>의
<span lang=EN-US>LcMax::DoExport() </span>함수를 참고하기 바랍니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:14.0pt'>5.2.3 Mesh</span></p>

<p class=MsoNormal>맥스는 <span lang=EN-US>Mesh</span>를 통해서 화면에 오브젝트를 표현합니다<span
lang=EN-US>. </span>메쉬는 정점 데이터<span lang=EN-US>, </span>인덱스 데이터 등을 포함하고 있어서 우리는
이것을<span lang=EN-US> Export</span>해서 게임에서 정점 버퍼와 인덱스 버퍼로 사용해야 합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>우리는 게임에서 주로 삼각형을 기본으로 렌더링 오브젝트를 구성합니다<span lang=EN-US>. </span>그런데
맥스의<span lang=EN-US> Primitive</span>는<span lang=EN-US> D3D </span>보다 다양해서 맥스의 메쉬를<span
lang=EN-US> D3D</span>에서 사용할 수 있도록 바꾸어야 합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>먼저 맥스의<span lang=EN-US> Object</span>에게 삼각형으로 메쉬의 구조를 바꿀 수 있는지
<span lang=EN-US style='color:#880000'>CanConvertToType</span><span lang=EN-US>()
</span>함수로 확인하고<span lang=EN-US>, </span>전환이 가능하면 <span lang=EN-US
style='color:#880000'>ConvertToType</span><span lang=EN-US>() </span>함수로 폴리곤을 구성하는<span
lang=EN-US> TriObject</span>를 다음과 같이 얻어 냅니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>if</span><span lang=EN-US>(!pObj-&gt;</span><span
lang=EN-US style='color:#880000'>CanConvertToType</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>Class_ID</span><span lang=EN-US>(</span><span
lang=EN-US style='color:#A000A0'>TRIOBJ_CLASS_ID</span><span lang=EN-US>, </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>)))</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>continue</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>TriObject</span><span lang=EN-US>* pTri = (</span><span
lang=EN-US style='color:blue'>TriObject</span><span lang=EN-US> *)pObj-&gt;</span><span
lang=EN-US style='color:#880000'>ConvertToType</span><span lang=EN-US>(</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>, </span><span
lang=EN-US style='color:blue'>Class_ID</span><span lang=EN-US>(</span><span
lang=EN-US style='color:#A000A0'>TRIOBJ_CLASS_ID</span><span lang=EN-US>, </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>));</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>다음으로<span lang=EN-US> TriObject</span>에서<span
lang=EN-US> Mesh</span>를 다음과 같이 얻습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>Mesh</span><span lang=EN-US>* pMesh&nbsp;&nbsp;&nbsp; =
&amp;pTri-&gt;</span><span lang=EN-US style='color:#880000'>GetMesh</span><span
lang=EN-US>();</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>이<span lang=EN-US> Mesh</span>에 폴리곤을
구성하는 각각의 삼각형에 대한 인덱스 데이터와 정점 데이터가 포함되어 다음과 같이 인덱스<span lang=EN-US>, </span>정점의 숫자를
얻고<span lang=EN-US>, </span>이 숫자만큼 회전하면서 인덱스<span lang=EN-US>, </span>정점 데이터를 얻어
냅니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>INT</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; iNvtx&nbsp;&nbsp; =
pMesh-&gt;</span><span lang=EN-US style='color:#880000'>getNumVerts</span><span
lang=EN-US>();</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>INT</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; iNfce&nbsp;&nbsp; =
pMesh-&gt;</span><span lang=EN-US style='color:#880000'>getNumFaces</span><span
lang=EN-US>();</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:green'>// </span><span style='color:green'>인덱스 데이터 출력</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>for</span><span lang=EN-US> (i=</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>; i&lt;iNfce; ++i)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>INT</span><span lang=EN-US> a, b, c;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; a
= pMesh-&gt;faces[i].v[</span><span lang=EN-US style='color:red'>0</span><span
lang=EN-US>];</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; b
= pMesh-&gt;faces[i].v[</span><span lang=EN-US style='color:red'>1</span><span
lang=EN-US>];</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; c
= pMesh-&gt;faces[i].v[</span><span lang=EN-US style='color:red'>2</span><span
lang=EN-US>];</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=PT-BR style='color:#880000'>fprintf</span><span lang=PT-BR>(fp, </span><span
lang=PT-BR style='color:fuchsia'>&quot;&nbsp; %4d %4d %4d\n&quot;</span><span
lang=PT-BR>, a, b, c);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>}</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:green'>// </span><span style='color:green'>정점 데이터 출력</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>for</span><span lang=EN-US> (i=</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>; i&lt;iNvtx; ++i)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>Point3</span><span lang=EN-US> v =
pMesh-&gt;verts[i];</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>fprintf</span><span lang=EN-US>(fp, </span><span
lang=EN-US style='color:fuchsia'>&quot;&nbsp; %12.5f %12.5f %12.5f\n&quot;</span><span
lang=EN-US>, v.x, v.y, v.z);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>}</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>전체 코드는 <span lang=EN-US><a
href="https://github.com/3dapi/dv01_max/raw/master/mxp13_mesh01.zip">mxp13_mesh01.zip</a></span>을 참고하기 바랍니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:14.0pt'>5.2.4 Viewer</span></p>

<p class=MsoNormal>우리가<span lang=EN-US> Exporter</span>를 만드는 것은 게임에서 필요한 데이터를 만들기
위함입니다<span lang=EN-US>. </span>따라서 지금부터 추출한 데이터가 원하는 형태로 구성되어 있는지 뷰어<span
lang=EN-US>(Viewer) </span>프로그램으로 확인 해야 하고 이를 위해서 자료구조가 필요합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>이전에 작성한<span lang=EN-US> Mesh</span>를 수정해서<span lang=EN-US>
View</span>에 올릴 수 있는 형태로 자료구조를 구성해 봅시다<span lang=EN-US>.</span></p>

<p class=MsoNormal>먼저 정점의 인덱스와 위치를 저장할 다음과 같은 구조체를 선언합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:blue'>struct VtxIdx</span></p>

<p class=MsoNormal><span lang=EN-US>{</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>WORD</span><span lang=EN-US> a, b, c;</span></p>

<p class=MsoNormal><span lang=EN-US>};</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>struct</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>VtxPos</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>FLOAT</span><span lang=EN-US> x, y, z;</span></p>

<p class=MsoNormal><span lang=EN-US>};</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:blue'>struct LcGeo</span></p>

<p class=MsoNormal><span lang=EN-US>{</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>INT</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; nFce;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Number of Face</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>INT</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; nPos;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Number of Position</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>VtxIdx</span><span lang=EN-US>*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pFce;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Face List</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>VtxPos</span><span lang=EN-US>* &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pPos;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Position List</span></p>

<p class=MsoNormal><span lang=EN-US>};</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>LcMax </span>클래스에 다음과 같은 멤버 변수를 추가합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:blue'>class</span><span
lang=EN-US> </span><span lang=EN-US style='color:blue'>LcMax</span><span
lang=EN-US> : </span><span lang=EN-US style='color:blue'>public</span><span
lang=EN-US> SceneExport</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal><span lang=EN-US style='color:blue'>INT</span><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; m_nGeo;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Number of Geometry</span></p>

<p class=MsoNormal><span lang=EN-US style='color:blue'>LcGeo</span><span
lang=EN-US>*&nbsp; m_pGeo;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Geometry Data</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이전처럼 파일에 그냥 출력을 하면 뷰어에서 데이터를 읽어오는데 일관성이 떨어지므로<span
lang=EN-US> Node</span>를 모으고 나서<span lang=EN-US> Geometry Data</span>를 만들고 데이터를
채운 후에 파일로 출력을 해야 파일 구조가 완성 됩니다<span lang=EN-US>. </span>또한<span lang=EN-US>
Geometry</span>에 대한 자료 구조가 완성되어 있으면 뷰어에서 텍스트 파일을 읽는 것보다 이진<span lang=EN-US>(Binary)
</span>파일을 읽는 것이 편리해서 게임 또는 뷰어에서는 이진 파일을 사용하고 눈으로 확인 하기 위한 용도로는 텍스트 파일을 사용합니다<span
lang=EN-US>. </span>이를 위해 마지막에 이 두 종류의 파일에 데이터를 저장합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:blue'>int</span><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; </span><span lang=EN-US style='color:blue'>LcMax</span><span
lang=EN-US>::</span><span lang=EN-US style='color:#880000'>DoExport</span><span
lang=EN-US>(</span><span lang=EN-US style='color:blue'>…</span><span
lang=EN-US>)</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal><span lang=EN-US style='color:green'>// 1. Gather Node</span></p>

<p class=MsoNormal><span lang=EN-US style='color:blue'>INode</span><span
lang=EN-US>*&nbsp; pRoot = m_pI-&gt;</span><span lang=EN-US style='color:#880000'>GetRootNode</span><span
lang=EN-US>();</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#880000'>GatherNode</span><span
lang=EN-US>(pRoot);</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:green'>// 2. Create and Setup
Geometry</span></p>

<p class=MsoNormal><span lang=EN-US style='color:blue'>if</span><span
lang=EN-US>(</span><span lang=EN-US style='color:#A000A0'>FAILED</span><span
lang=EN-US>(</span><span lang=EN-US style='color:#880000'>SetupGeometry</span><span
lang=EN-US>()))</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return
</span><span lang=EN-US style='color:#A000A0'>FALSE</span><span lang=EN-US>;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:green'>// 3. Geometry</span><span
style='color:green'>를 이용해 <span lang=EN-US>Binary, Text </span>파일로 출력</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#880000'>WriteBinary</span><span
lang=EN-US>();</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#880000'>WriteText</span><span
lang=EN-US>();</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>void</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>LcMax</span><span lang=EN-US>::</span><span lang=EN-US
style='color:#880000'>WriteBinary</span><span lang=EN-US>()</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>fwrite</span><span lang=EN-US>(&amp;m_nGeo, </span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>, </span><span
lang=EN-US style='color:blue'>sizeof</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>INT</span><span lang=EN-US>), fp);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=PT-BR style='color:blue'>for</span><span lang=PT-BR>(n =</span><span
lang=PT-BR style='color:red'>0</span><span lang=PT-BR>; n&lt;m_nGeo; ++n)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=PT-BR style='color:blue'>LcGeo</span><span lang=PT-BR>* pGeo = &amp;m_pGeo[n];</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>fwrite</span><span lang=EN-US>(pGeo-&gt;sName,
&nbsp;</span><span lang=EN-US style='color:red'>1</span><span lang=EN-US>, </span><span
lang=EN-US style='color:blue'>sizeof</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>char</span><span lang=EN-US>)*</span><span
lang=EN-US style='color:red'>32</span><span lang=EN-US>, fp); </span><span
lang=EN-US style='color:green'>// Node Name</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>fwrite</span><span lang=EN-US>(&amp;pGeo-&gt;nType,
</span><span lang=EN-US style='color:red'>1</span><span lang=EN-US>, </span><span
lang=EN-US style='color:blue'>sizeof</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>INT </span><span lang=EN-US>)&nbsp; , fp);&nbsp; </span><span
lang=EN-US style='color:green'>// Node Type</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>fwrite</span><span lang=EN-US>(&amp;pGeo-&gt;nFce,
&nbsp;</span><span lang=EN-US style='color:red'>1</span><span lang=EN-US>, </span><span
lang=EN-US style='color:blue'>sizeof</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>INT </span><span lang=EN-US>)&nbsp; , fp);&nbsp; </span><span
lang=EN-US style='color:green'>// Index Number</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>fwrite</span><span lang=EN-US>(&amp;pGeo-&gt;nPos,
&nbsp;</span><span lang=EN-US style='color:red'>1</span><span lang=EN-US>, </span><span
lang=EN-US style='color:blue'>sizeof</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>INT </span><span lang=EN-US>)&nbsp; , fp);&nbsp; </span><span
lang=EN-US style='color:green'>// Vertex Number</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>fwrite</span><span lang=EN-US>(pGeo-&gt;pFce, pGeo-&gt;nFce,
</span><span lang=EN-US style='color:blue'>sizeof</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>VtxIdx</span><span lang=EN-US>), fp);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>fwrite</span><span lang=EN-US>(pGeo-&gt;pPos, pGeo-&gt;nPos,
</span><span lang=EN-US style='color:blue'>sizeof</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>VtxPos</span><span lang=EN-US>), fp);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>전체 코드는 <span lang=EN-US><a
href="https://github.com/3dapi/dv01_max/raw/master/mxp13_mesh02.zip">mxp13_mesh02.zip</a></span>를 참고 하기 바랍니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>다음으로 뷰어를 만들어야 합니다<span lang=EN-US>. </span>뷰어에서 이진 파일을 읽는 방법은
<span lang=EN-US>void LcMax::WriteBinary()</span></p>

<p class=MsoNormal>함수의<span lang=EN-US> fwrite() </span>함수 대신<span lang=EN-US>
fread() </span>함수로 바꾸고<span lang=EN-US> new </span>연산자로 동적 할당을 하면 됩니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US><a href="https://github.com/3dapi/dv01_max/raw/master/mxp13_viewer1.zip">mxp13_viewer1.zip</a></span>은
<span lang=EN-US><a href="https://github.com/3dapi/dv01_max/raw/master/mxp13_mesh02.zip">mxp13_mesh02.zip</a></span>에서 추출한 데이터를
확인하는 뷰어이며 <span lang=EN-US>CLcmAcm </span>클래스는 이진 파일을 읽어서 화면에 출력하는 클래스 입니다<span
lang=EN-US>. </span>이 클래스의<span lang=EN-US> LoadMdl() </span>함수는 모델을 읽어 오는 함수로<span
lang=EN-US> LcMax::WriteBinary()</span>와 대응하는 함수입니다<span lang=EN-US>. </span>파일에서
데이터를 읽어올 때 <span lang=EN-US>Geometry</span>와 인덱스<span lang=EN-US>, </span>버텍스 데이터는
<span lang=EN-US>new </span>연산자로 데이터를 동적 할당하고 있음을 주의해야 합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>INT</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>CLcmAcm</span><span lang=EN-US>::</span><span lang=EN-US
style='color:#880000'>LoadMdl</span><span lang=EN-US>(</span><span lang=EN-US
style='color:blue'>char</span><span lang=EN-US>* sFile)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>fread</span><span lang=EN-US>(&amp;m_nGeo, </span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>, </span><span
lang=EN-US style='color:blue'>sizeof</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>INT</span><span lang=EN-US>), fp);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_pGeo
= </span><span lang=EN-US style='color:blue'>new</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>LcGeo</span><span lang=EN-US>[m_nGeo];</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=PT-BR style='color:blue'>for</span><span lang=PT-BR>(n =</span><span
lang=PT-BR style='color:red'>0</span><span lang=PT-BR>; n&lt;m_nGeo; ++n)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=PT-BR style='color:blue'>LcGeo</span><span lang=PT-BR>* pGeo =
&amp;m_pGeo[n];</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>fread</span><span lang=EN-US>(&amp;pGeo-&gt;nFce,
</span><span lang=EN-US style='color:red'>1</span><span lang=EN-US>, </span><span
lang=EN-US style='color:blue'>sizeof</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>INT</span><span lang=EN-US>) , fp);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>fread</span><span lang=EN-US>(&amp;pGeo-&gt;nPos,
</span><span lang=EN-US style='color:red'>1</span><span lang=EN-US>, </span><span
lang=EN-US style='color:blue'>sizeof</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>INT</span><span lang=EN-US>) , fp);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pGeo-&gt;pFce
= </span><span lang=EN-US style='color:blue'>new</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>VtxIdx</span><span lang=EN-US>[pGeo-&gt;nFce];</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=PT-BR>pGeo-&gt;pPos = </span><span lang=PT-BR style='color:blue'>new</span><span
lang=PT-BR> </span><span lang=PT-BR style='color:blue'>VtxPos</span><span
lang=PT-BR>[pGeo-&gt;nPos];</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=PT-BR style='color:#880000'>fread</span><span lang=PT-BR>(pGeo-&gt;pFce,
pGeo-&gt;nFce, </span><span lang=PT-BR style='color:blue'>sizeof</span><span
lang=PT-BR>(</span><span lang=PT-BR style='color:blue'>VtxIdx</span><span
lang=PT-BR>), fp);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=PT-BR style='color:#880000'>fread</span><span lang=PT-BR>(pGeo-&gt;pPos,
pGeo-&gt;nPos, </span><span lang=PT-BR style='color:blue'>sizeof</span><span
lang=PT-BR>(</span><span lang=PT-BR style='color:blue'>VtxPos</span><span
lang=PT-BR>), fp);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US>}</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>렌더링은<span lang=EN-US> User
Memory Pointer DrawIndexedPrimitiveUP() </span>함수를 이용하고 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>void</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>CLcmAcm</span><span lang=EN-US>::</span><span lang=EN-US
style='color:#880000'>Render</span><span lang=EN-US>()</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>for</span><span lang=EN-US>(i=</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>; i&lt;m_nGeo; ++i)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>LcGeo</span><span lang=EN-US>*&nbsp; pGeo&nbsp;&nbsp;&nbsp; =
&amp;m_pGeo[i];</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_pDev-&gt;</span><span
lang=EN-US style='color:#880000'>SetFVF</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>VtxPos</span><span lang=EN-US>::</span><span
lang=EN-US style='color:#A000A0'>FVF</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_pDev-&gt;</span><span
lang=EN-US style='color:#880000'>DrawIndexedPrimitiveUP</span><span lang=EN-US>(</span><span
lang=EN-US style='color:#A000A0'>D3DPT_TRIANGLELIST</span><span lang=EN-US>, </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>, pGeo-&gt;nPos</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,
pGeo-&gt;nFce, pGeo-&gt;pFce, (</span><span lang=EN-US style='color:blue'>D3DFORMAT</span><span
lang=EN-US>)</span><span lang=EN-US style='color:blue'>VtxIdx</span><span
lang=EN-US>::</span><span lang=EN-US style='color:#A000A0'>FVF</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,
pGeo-&gt;pPos, </span><span lang=EN-US style='color:blue'>sizeof</span><span
lang=EN-US>(</span><span lang=EN-US style='color:blue'>VtxPos</span><span
lang=EN-US>)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US><a
href="https://github.com/3dapi/dv01_max/raw/master/mxp13_viewer1.zip">mxp13_viewer1.zip</a></span>를 실행하고<span lang=EN-US>
&quot;_Exec/model/object.acm&quot; </span>을 불러오면 다음의 오른쪽 그림과 같이 출력됩니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US><img border=0
width=287 height=204 src="https://github.com/3dapi/bs25_shader1/raw/master/dv01_max.files/image024.gif">&nbsp;<img border=0
width=273 height=204 src="https://github.com/3dapi/bs25_shader1/raw/master/dv01_max.files/image025.gif"></span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&lt;</span>맥스 데이터<span
lang=EN-US>: <a href="https://github.com/3dapi/dv01_max/raw/master/max_object1.zip">max_object1.zip</a>. Viewer</span>에서 확인한
데이터<span lang=EN-US>: <a href="https://github.com/3dapi/dv01_max/raw/master/mxp13_viewer1.zip">mxp13_viewer1.zip</a>&gt;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>그림을 비교해 보면 맥스 화면과<span
lang=EN-US> Viewer</span>의 화면이 차이가 있습니다<span lang=EN-US>. </span>이것은<span
lang=EN-US> ASE Parsing</span>에서도 이야기 했듯이 다음 그림과 같이 맥스는 오른손 좌표계를 사용하고<span
lang=EN-US> D3D</span>는 왼손 좌표계를 사용하기 때문입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US><img border=0
width=492 height=198 src="https://github.com/3dapi/bs25_shader1/raw/master/dv01_max.files/image026.gif"></span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&lt;</span>맥스와<span
lang=EN-US> D3D </span>좌표계<span lang=EN-US>&gt;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>ASE</span>에서는 파일을
읽어올 때 위치에 대해서는 <span lang=EN-US>y</span>와<span lang=EN-US> z</span>를 교환하고 인덱스는<span
lang=EN-US> b</span>와<span lang=EN-US> c</span>를 교환한다고 했습니다<span lang=EN-US>. </span>이것을
파일을 읽어 올 때 처리하지 않고 플러그인 내부에서 인덱스와 정점 데이터를 저장할 때 다음과 같이 처리합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>INT</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>LcMax</span><span lang=EN-US>::</span><span lang=EN-US
style='color:#880000'>SetupGeometry</span><span lang=EN-US>()</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:green'>// </span><span style='color:green'>인덱스 데이터 저장</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>for</span><span lang=EN-US> (i=</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>; i&lt;iNfce; ++i)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pGeo-&gt;pFce[i].a
= pMesh-&gt;faces[i].v[</span><span lang=EN-US style='color:red'>0</span><span
lang=EN-US>];</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pGeo-&gt;pFce[i].b
= pMesh-&gt;faces[i].v[</span><span lang=EN-US style='color:red'>2</span><span
lang=EN-US>];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span lang=EN-US
style='color:green'>// b &lt;--&gt; c </span><span style='color:green'>교환</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pGeo-&gt;pFce[i].c
= pMesh-&gt;faces[i].v[</span><span lang=EN-US style='color:red'>1</span><span
lang=EN-US>];</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>}</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:green'>// </span><span style='color:green'>정점 데이터 저장</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>for</span><span lang=EN-US> (i=</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>; i&lt;iNvtx; ++i)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>Point3</span><span lang=EN-US> v =
pMesh-&gt;verts[i];</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pGeo-&gt;pPos[i].x
= v.x;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pGeo-&gt;pPos[i].y
= v.z; </span><span lang=EN-US style='color:green'>//y &lt;--&gt; z </span><span
style='color:green'>교환</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=PT-BR>pGeo-&gt;pPos[i].z = v.y;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>}</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>두 번째로 뷰어에서 확인한 모델은 전부<span
lang=EN-US> (0, 0, 0)</span>을 중심으로 그리고 있음을 볼 수 있습니다<span lang=EN-US>. </span>이것은
각각의<span lang=EN-US> Geometry</span>가 지역좌표계로 그리기 때문입니다<span lang=EN-US>. </span>노드에
적용된 월드 행렬을 얻기 위해서 <span lang=EN-US>INode </span>인터페이스에서 <span lang=EN-US>GetObjTMAfterWSM()
</span>함수를 이용합니다<span lang=EN-US>. </span>이 함수는<span lang=EN-US> WSM(World
Space Modifier)</span>가 적용된 후의<span lang=EN-US> Transform Matrix</span>를 반환하는 함수입니다<span
lang=EN-US>. </span>특히<span lang=EN-US>, </span>애니메이션이 있는 경우에 이 함수를 사용해서 월드 행렬을
얻어 옵니다<span lang=EN-US>. </span>노드에 적용되는 월드 행렬은 다음 공식처럼 만들 수 있습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><i>노드의 월드 행렬<span lang=EN-US> = </span>노드의
지역 행렬<span lang=EN-US> (Local Matrix) * </span>부모 노드의 월드 행렬</i></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>애니메이션이 없는 데이터라면 월드 행렬만 가지고 있거나 아니면
정점의 위치에 월드 행렬을 곱한 값을 적용하는 것이 더 나을 수 있습니다<span lang=EN-US>. </span>하지만 애니메이션이 있다면
크기 변환<span lang=EN-US>, </span>회전 변환<span lang=EN-US>, </span>이동 변환에 대한 행렬을 가지고
지역 행렬을 만들어야 하기 때문에 <span lang=EN-US>Node</span>에 지역행렬을 저장하고 렌더링 할 때마다 월드 행렬을 계산하도록
구성하는 것이 애니메이션을 적용할 때 편리합니다<span lang=EN-US>. </span>노드의 지역 행렬은 이전의 식 양변에 부모 노드의
월드 행렬의 역행렬을 곱하면 다음과 같이 구해집니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><i>노드의 지역 행렬<span lang=EN-US> = </span>노드의
월드 행렬<span lang=EN-US> * </span>부모 노드의 월드 행렬의 역행렬</i></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>부모 노드에 대한 인덱스를 포함 시켜 데이터가 나무 구조<span
lang=EN-US>(Tree Struct)</span>의 계층적<span lang=EN-US>(Hierarchy)</span>으로 구성 되도록
다음과 같이<span lang=EN-US> LcGeo </span>구조체에 부모 노드의 인덱스를 추가하고 또한 자신의 지역 행렬도 추가합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>struct</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>LcGeo</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>INT</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; nPrn;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Parent Index</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>D3DXMATRIX</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; mtLcl;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Local Matrix</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>LcGeo</span><span lang=EN-US>()</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; nPrn&nbsp;&nbsp;&nbsp; =
-</span><span lang=EN-US style='color:red'>1</span><span lang=EN-US>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>부모가 없음</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>D3DXMatrixIdentity</span><span lang=EN-US>(&amp;mtLcl);&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>지역행렬을 단위 행렬로
만든다<span lang=EN-US>.</span></span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:green'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>LcMax::SetupGeometry() </span>함수를 수정해서 다음과 같이
부모 노드에 대한 인덱스를 설정합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:green'>// Setup Parent Index</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:blue'>for</span><span lang=PT-BR>(n =</span><span lang=PT-BR
style='color:red'>0</span><span lang=PT-BR>; n&lt;m_nGeo; ++n)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=PT-BR style='color:blue'>LcGeo</span><span lang=PT-BR>*&nbsp; pGeo =
&amp;m_pGeo[n];</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=PT-BR style='color:blue'>INode</span><span lang=PT-BR>*&nbsp; pNode =
m_vMaxNode[n];</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>INode</span><span lang=EN-US>*&nbsp; pPrn =
pNode-&gt;</span><span lang=EN-US style='color:#880000'>GetParentNode</span><span
lang=EN-US>();</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>부모의 노드를 찾아 인덱스를
설정</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>(pPrn)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>for</span><span lang=EN-US>(i=</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>; i&lt;m_nGeo; ++i)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=PT-BR>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=PT-BR style='color:blue'>INode</span><span lang=PT-BR>*&nbsp; pCur =
m_vMaxNode[i];</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>(pCur == pPrn
&amp;&amp; i != n )</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pGeo-&gt;nPrn
= i;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>break</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>또한 지역행렬도 다음과 같이 계산해서 저장합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:green'>// Setup Local Matrix</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:blue'>for</span><span lang=PT-BR>(n =</span><span lang=PT-BR
style='color:red'>0</span><span lang=PT-BR>; n&lt;m_nGeo; ++n)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=PT-BR style='color:blue'>LcGeo</span><span lang=PT-BR>*&nbsp; pGeo =
&amp;m_pGeo[n];</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=PT-BR style='color:blue'>INode</span><span lang=PT-BR>*&nbsp; pNode =
m_vMaxNode[n];</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=PT-BR style='color:blue'>INode</span><span lang=PT-BR>*&nbsp; pPrnt =
pNode-&gt;</span><span lang=PT-BR style='color:#880000'>GetParentNode</span><span
lang=PT-BR>();</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>Matrix3</span><span lang=EN-US> tmLocal;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>Matrix3</span><span lang=EN-US> tmWorld =
pNode-&gt;</span><span lang=EN-US style='color:#880000'>GetObjTMAfterWSM</span><span
lang=EN-US>(</span><span lang=EN-US style='color:red'>0</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>(!pPrnt)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tmLocal
= tmWorld;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>else</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>Matrix3</span><span lang=EN-US> tmParent=
pPrnt-&gt;</span><span lang=EN-US style='color:#880000'>GetObjTMAfterWSM</span><span
lang=EN-US>(</span><span lang=EN-US style='color:red'>0</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tmLocal
= tmWorld * </span><span lang=EN-US style='color:#880000'>Inverse</span><span
lang=EN-US>(tmParent);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>MaxMatrixToD3D</span><span lang=EN-US>(&amp;pGeo-&gt;mtLcl,
&amp;tmLocal);</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>Inverse() </span>함수는 맥스<span lang=EN-US>
SDK</span>에서 제공하는 역행렬을 구하는 함수입니다<span lang=EN-US>. MaxMatrixToD3D()</span>는 맥스의
행렬을<span lang=EN-US> D3D</span>에 맞게 자리 교환을 하는 함수입니다<span lang=EN-US>. </span>이것은<span
lang=EN-US> ASE Parsing</span>에서도 했듯이 맥스의 행렬의<span lang=EN-US> 2,3 </span>행을 교환하고
<span lang=EN-US>2, 3</span>열 교환하면<span lang=EN-US> D3D</span>에서 사용하는 행렬로 만들어 집니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>void</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>LcMax</span><span lang=EN-US>::</span><span lang=EN-US
style='color:#880000'>MaxMatrixToD3D</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>D3DXMATRIX</span><span lang=EN-US>* pDst, </span><span
lang=EN-US style='color:blue'>Matrix3</span><span lang=EN-US>* pSrc, </span><span
lang=EN-US style='color:blue'>BOOL</span><span lang=EN-US> bIdentity)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>Point3</span><span lang=EN-US>&nbsp; v3;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; v3
= pSrc-&gt;</span><span lang=EN-US style='color:#880000'>GetRow</span><span
lang=EN-US>(</span><span lang=EN-US style='color:red'>0</span><span lang=EN-US>);
pDst-&gt;_11 = v3.x;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pDst-&gt;_12 = v3.z; pDst-&gt;_13
= v3.y;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; v3
= pSrc-&gt;</span><span lang=EN-US style='color:#880000'>GetRow</span><span
lang=EN-US>(</span><span lang=EN-US style='color:red'>2</span><span lang=EN-US>);
pDst-&gt;_21 = v3.x;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pDst-&gt;_22 = v3.z; pDst-&gt;_23
= v3.y;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; v3
= pSrc-&gt;</span><span lang=EN-US style='color:#880000'>GetRow</span><span
lang=EN-US>(</span><span lang=EN-US style='color:red'>1</span><span lang=EN-US>);
pDst-&gt;_31 = v3.x;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pDst-&gt;_32 = v3.z; pDst-&gt;_33
= v3.y;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; v3
= pSrc-&gt;</span><span lang=EN-US style='color:#880000'>GetRow</span><span
lang=EN-US>(</span><span lang=EN-US style='color:red'>3</span><span lang=EN-US>);
pDst-&gt;_41 = v3.x;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pDst-&gt;_42 = v3.z; pDst-&gt;_43
= v3.y;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>부모 노드의 인덱스와 지역행렬을 저장할 수 있도록 <span lang=EN-US>LcMax:: WriteBinary()
</span>함수와 <span lang=EN-US>LcMax:: WriteText() </span>함수를 수정합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>void</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>LcMax</span><span lang=EN-US>::</span><span lang=EN-US
style='color:#880000'>WriteBinary</span><span lang=EN-US>()</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=PT-BR style='color:blue'>for</span><span lang=PT-BR>(n =</span><span
lang=PT-BR style='color:red'>0</span><span lang=PT-BR>; n&lt;m_nGeo; ++n)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=PT-BR style='color:blue'>LcGeo</span><span lang=PT-BR>* pGeo =
&amp;m_pGeo[n];</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>fwrite</span><span lang=EN-US>(&amp;pGeo-&gt;nPrn,&nbsp;
</span><span lang=EN-US style='color:red'>1</span><span lang=EN-US>, </span><span
lang=EN-US style='color:blue'>sizeof</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>INT</span><span lang=EN-US> ), fp);&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Parent Index</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>fwrite</span><span lang=EN-US>(&amp;pGeo-&gt;mtLcl,
</span><span lang=EN-US style='color:red'>1</span><span lang=EN-US>, </span><span
lang=EN-US style='color:blue'>sizeof</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>D3DXMATRIX</span><span lang=EN-US>),fp);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Local Matrix</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>전체 코드는 <span lang=EN-US><a href="https://github.com/3dapi/dv01_max/raw/master/mxp14_transform.zip">mxp14_transform.zip</a></span>를
참고 하기 바랍니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>플러그인에서는 지역 행렬만 가지고 있지만<span lang=EN-US> Viewer</span>에서는 월드 행렬도
가지고 있어야 하위 노드에서 계산이 됩니다<span lang=EN-US>. </span>따라서 부모 인덱스<span lang=EN-US>, </span>지역
행렬과 월드 행렬이 있어야 합니다<span lang=EN-US>. </span>또한 매 번 부모 노드를 찾게 되면 불편하므로 파일에서 읽어올 때
부모 노드를 지정할 수 있도록 부모의 포인터를 추가합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>struct</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>LcGeo</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>INT</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; nPrn;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Parent Index</span></p>

<p class=MsoNormal style='text-indent:40.0pt;word-break:keep-all'><span
lang=EN-US style='color:blue'>LcGeo</span><span lang=EN-US>*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pPrn;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Parent Node</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>D3DXMATRIX</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mtLcl;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Local Matrix</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>D3DXMATRIX</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mtWld;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// World Matrix</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>파일을 읽는 함수도 수정합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>INT CLcmAcm::</span><span lang=EN-US
style='color:#880000'>LoadMdl</span><span lang=EN-US>(char* sFile)</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=PT-BR style='color:blue'>for</span><span lang=EN-US>(n =</span><span
lang=PT-BR style='color:red'>0</span><span lang=EN-US>; n&lt;m_nGeo; ++n)</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=PT-BR style='color:blue'>LcGeo</span><span lang=EN-US>* pGeo =
&amp;m_pGeo[n];</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>fread</span><span lang=EN-US>(&amp;pGeo-&gt;nPrn,&nbsp;
</span><span lang=EN-US style='color:red'>1</span><span lang=EN-US>, </span><span
lang=EN-US style='color:blue'>sizeof</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>INT</span><span lang=EN-US> ), fp);&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Parent Index</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>fread</span><span lang=EN-US>(&amp;pGeo-&gt;mtLcl,
</span><span lang=EN-US style='color:red'>1</span><span lang=EN-US>, </span><span
lang=EN-US style='color:blue'>sizeof</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>D3DXMATRIX</span><span lang=EN-US>),fp);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Local Matrix</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>부모 노드 지정</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>(-</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US> != pGeo-&gt;nPrn)</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pGeo-&gt;pPrn
= &amp;m_pGeo[pGeo-&gt;nPrn];</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>애니메이션이 있다는 전제하에 매 프레임 마다 행렬을 갱신할 수 있도록 다음과 같이 <span
lang=EN-US>CLcmAcm::FrameMove() </span>함수를 수정합니다<span lang=EN-US>. </span>각각의<span
lang=EN-US> Geometry</span>의 월드 행렬은 다음과 같은 공식을 이용해서 구현합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><i>노드의 월드 행렬<span lang=EN-US> = </span>노드의
지역 행렬<span lang=EN-US> (Local Matrix) * </span>부모 노드의 월드 행렬</i></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>만약 부모 노드가 없으면 자신의 지역 행렬을 월드 행렬로 설정합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>INT CLcmAcm::</span><span lang=EN-US
style='color:#880000'>FrameMove</span><span lang=EN-US>()</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>for</span><span lang=EN-US>(i=</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>; i&lt;m_nGeo; ++i)</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>LcGeo</span><span lang=EN-US>*&nbsp; pCur =
&amp;m_pGeo[i];</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>LcGeo</span><span lang=EN-US>*&nbsp; pPrn =
pCur-&gt;pPrn;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>(pPrn)</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pCur-&gt;mtWld
= pCur-&gt;mtLcl * pPrn-&gt;mtWld;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pCur-&gt;mtWld
= pCur-&gt;mtLcl;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>행렬이 포함 되어 있으므로 각각의<span lang=EN-US> Geometry</span>에 대해서 월드 행렬을
설정해야 합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>void CLcmAcm::</span><span lang=EN-US
style='color:#880000'>Render</span><span lang=EN-US>()</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>for</span><span lang=EN-US>(i=</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>; i&lt;m_nGeo; ++i)</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>LcGeo</span><span lang=EN-US>*&nbsp; pGeo&nbsp;&nbsp;&nbsp; =
&amp;m_pGeo[i];</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_pDev-&gt;</span><span
lang=EN-US style='color:#880000'>SetTransform</span><span lang=EN-US>(</span><span
lang=EN-US style='color:#A000A0'>D3DTS_WORLD</span><span lang=EN-US>,
&amp;pGeo-&gt;mtWld);</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_pDev-&gt;</span><span
lang=EN-US style='color:#880000'>DrawIndexedPrimitiveUP</span><span lang=EN-US>(…);</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_pDev-&gt;</span><span
lang=EN-US style='color:#880000'>SetTransform</span><span lang=EN-US>(</span><span
lang=EN-US style='color:#A000A0'>D3DTS_WORLD</span><span lang=EN-US>,
&amp;mtI);</span><span lang=EN-US style='color:green'> // </span><span
style='color:green'>월드 행렬 복귀</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>전체 코드는 <span lang=EN-US><a href="https://github.com/3dapi/dv01_max/raw/master/mxp14_viewer2.zip">mxp14_viewer2.zip</a></span>를
실행하면 다음과 같은 화면을 볼 수 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=272 height=204
src="https://github.com/3dapi/bs25_shader1/raw/master/dv01_max.files/image027.gif">&nbsp;<img border=0 width=273 height=204
src="https://github.com/3dapi/bs25_shader1/raw/master/dv01_max.files/image028.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>월드 행렬이 적용된<span lang=EN-US>
Export </span>데이터<span lang=EN-US>: <a href="https://github.com/3dapi/dv01_max/raw/master/max_object2_rigid.zip">max_object2_rigid.zip</a>,
<a href="https://github.com/3dapi/dv01_max/raw/master/mxp14_viewer2.zip">mxp14_viewer2.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:16.0pt'>5.3 Animation</span></p>

<p class=MsoNormal>정점의 위치에 대한 변화를 시간의 순서대로 만든 것이 애니메이션입니다<span lang=EN-US>. </span>애니메이션은
정점의 위치 자체를 변환하는 방법이 있을 수 있고<span lang=EN-US>, </span>정점에 영향을 주는 월드 행렬만 시간에 따라 변환시키고
난 다음에 이것을 파이프라인에 적용하는 방법이 있을 수 있습니다<span lang=EN-US>. </span>좀 더 나은 방법은 미리 계층 구조를
만들어 놓고 이 계층 구조의 행렬을 변환한 다음에 정점에 적용하는 방법이 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>3D </span>맥스는 오브젝트에 애니메이션을 편리하게 적용할 수 있게<span
lang=EN-US> Bone</span>과<span lang=EN-US> Biped</span>를 지원하며 대부분의 그래픽 작업은 이 둘을 이용해서
애니메이션을 구현합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>Bone</span>은 그 언어 자체로 뼈대이며 여러 뼈대를 계층 구조<span
lang=EN-US>(Hierarchy) </span>결합하고 사용자는 결합된<span lang=EN-US> Bone</span>을 회전<span
lang=EN-US>, </span>이동 등을 적용해서 애니메이션을 구현합니다<span lang=EN-US>. </span>맥스는<span
lang=EN-US> Bone</span>을 좀 더 편리하게 사용하고자<span lang=EN-US> Bone</span>을 특화한<span
lang=EN-US> Biped</span>를 지원합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=170 height=227
src="https://github.com/3dapi/bs25_shader1/raw/master/dv01_max.files/image029.gif">&nbsp;<img border=0 width=170 height=227
src="https://github.com/3dapi/bs25_shader1/raw/master/dv01_max.files/image030.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>맥스의<span lang=EN-US> Bone</span>과<span
lang=EN-US> Biped&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>Bone</span>은 사용자가 자유롭게 계층 구조를 만들 수 있어서 숙련된 애니메이터<span
lang=EN-US>(Animator)</span>는 최소한의<span lang=EN-US> Bone</span>으로 다양한 동작을 만들어 낼
수 있습니다<span lang=EN-US>. Biped</span>는 규격화 되어 애니메이션 제작이 편리하고 일관된 작업을 유도해서 공동 작업에
유리합니다<span lang=EN-US>. </span>애니메이션이 많고 복잡한 캐릭터 모델의 경우 <span lang=EN-US>Biped</span>를
기본으로 하고 필요하다면<span lang=EN-US> Bone</span>을 추가 시켜 애니메이션을 작업을 합니다<span
lang=EN-US>. </span>나무나 풀과 같은 관절이 간단한 경우라면<span lang=EN-US> Bone</span>으로 작업을 많이
합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>그래픽 작업자는 맥스로<span lang=EN-US> Biped </span>또는<span
lang=EN-US> Bone</span>으로 애니메이션을 만듭니다<span lang=EN-US>. </span>그리고 미리 만들어 놓은<span
lang=EN-US> 3D </span>모델 데이터를 이들<span lang=EN-US> Biped/Bone</span>에 연결하는 리깅<span
lang=EN-US>(Rigging) </span>작업을 합니다<span lang=EN-US>. </span>이 리깅 작업은 <span
lang=EN-US>PHYSIQUE</span>와 <span lang=EN-US>SKIN </span>두 종류가 있습니다<span
lang=EN-US>. </span>작업의 방법은 차이가 있지만 <span lang=EN-US>PHYSIQUE/SKIN </span>는 정점에
영향을 주는<span lang=EN-US> Bone</span>을 설정하는 일이며 이것은<span lang=EN-US> D3D</span>의 스키닝
애니메이션 구현이라 할 수 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>맥스에서의 작업이 정점에 대해서 하나의<span lang=EN-US> Bone</span>에만 영향 받도록 되어
있다면 강체<span lang=EN-US>(Rigid) </span>애니메이션을 바탕으로 플러그인을 구성해야 하고<span
lang=EN-US>, </span>여러<span lang=EN-US> Bone</span>에 영향 받으면 스키닝 애니메이션으로 플러그인을 만들어야
합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>애니메이션에 대한 플러그인은 구현하기 쉬운 강체 애니메이션을 먼저 만들고 다음으로 스키닝에 대해서 만들어 보겠습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:14.0pt'>5.3.1 Rigid Body
Animation</span></p>

<p class=MsoNormal>강체 애니메이션<span lang=EN-US>(Rigid Body Animation)</span>에 대한 플러그인
제작은 의외로 간단합니다<span lang=EN-US>. </span>플러그인 제작 순서는 먼저 시간 정보를 얻습니다<span
lang=EN-US>. </span>다음으로 <span lang=EN-US>Bone</span>의 계층 구조와 메쉬를 저장하고 마지막에 시간에
대한 월드 행렬 또는 지역 행렬을 추출하면 됩니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>먼저 시간의 정보를 저장하기 위해 다음과 같은 구조체를 만듭니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>struct</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>LcHeader</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>INT</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; nFrmB;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Begin Frame</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>INT</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; nFrmE;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// End Frame</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>INT</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; nFrmP;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Frame Rate(FPS)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>INT</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; nFrmT;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Tick Frame</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>INT</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; nGeo;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Number of Geometry</span></p>

<p class=MsoNormal><span lang=EN-US>};</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이전에는<span lang=EN-US> Geometry </span>개수를 멤버로 가져갔는데 프로그램의 편리성을
위해<span lang=EN-US> LcHeader</span>에 포함시켰습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>시간 정보는 다음과 같이 구현 합니다<span lang=EN-US>. </span>이 방법은<span
lang=EN-US> ase </span>플러그인 예제와도 비슷합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>int</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
iTick = </span><span lang=EN-US style='color:#880000'>GetTicksPerFrame</span><span
lang=EN-US>();</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>Interval</span><span lang=EN-US> range = m_pI-&gt;</span><span
lang=EN-US style='color:#880000'>GetAnimRange</span><span lang=EN-US>();</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>m_Header.nFrmB
= range.</span><span lang=EN-US style='color:#880000'>Start</span><span
lang=EN-US>() / iTick;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>m_Header.nFrmE
= range.</span><span lang=EN-US style='color:#880000'>End</span><span
lang=EN-US>() / iTick;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>m_Header.nFrmP
= </span><span lang=EN-US style='color:#880000'>GetFrameRate</span><span
lang=EN-US>();</span></p>

<p class=MsoNormal><span lang=EN-US>m_Header.nFrmT = iTick;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>프로그램을 편리하게 작성하기 위해<span lang=EN-US> LcGeo</span>를 다음과 같이 수정합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:blue'>struct LcGeo</span></p>

<p class=MsoNormal><span lang=EN-US>{</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>char</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sName[</span><span
lang=EN-US style='color:red'>32</span><span lang=EN-US>];&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Node Name</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>INT</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; nType;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// 1:Geometry, 2: Bone, 0: Etc</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>INode</span><span lang=EN-US>*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pNode;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Node</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>INT</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; nPrn;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Parent Index</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>D3DXMATRIX</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; mtLcl;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Local Matrix</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>INT</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; nFce;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Number of Face</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>INT</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; nPos;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Number of Position</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>VtxIdx</span><span lang=EN-US>*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pFce;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Face List</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>VtxPos</span><span lang=EN-US>*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pPos;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Position List</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>INT</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; nAni;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Number of Animation</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>D3DXMATRIX</span><span lang=EN-US>*&nbsp;&nbsp;&nbsp; pAni;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Animation Matrix</span></p>

<p class=MsoNormal><span lang=EN-US>};</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이 구조체를 이용해서 노드를 모으고 계층 구조의 <span lang=EN-US>Node</span>를 <span
lang=EN-US>STL</span>을 이용해서 배열로 구성합니다<span lang=EN-US>. </span>이 부분은 이전 장에서 설명했으므로
생략하겠습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>맥스는 사용자가 바꾸지 않는 한<span lang=EN-US> Default</span>로<span
lang=EN-US> Bone</span>에 대해서<span lang=EN-US> &quot;Bone&quot;</span>이라는 키워드가<span
lang=EN-US> Biped</span>는<span lang=EN-US> &quot;Bip&quot; </span>키워드가 오브젝트의 이름에
적용되어 다음과 같이 <span lang=EN-US>Bone</span>인지 판단하는 함수 안에 구현 합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:blue'>void</span><span
lang=EN-US> </span><span lang=EN-US style='color:blue'>LcMax</span><span
lang=EN-US>::</span><span lang=EN-US style='color:#880000'>SetupIsBone</span><span
lang=EN-US>(</span><span lang=EN-US style='color:blue'>LcGeo</span><span
lang=EN-US>* pGeo)</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>( </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US> == </span><span
lang=EN-US style='color:#880000'>_strnicmp</span><span lang=EN-US>(pNode-&gt;</span><span
lang=EN-US style='color:#880000'>GetName</span><span lang=EN-US>(), </span><span
lang=EN-US style='color:fuchsia'>&quot;Bone&quot;</span><span lang=EN-US>, </span><span
lang=EN-US style='color:red'>4</span><span lang=EN-US>) ||</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US> == </span><span
lang=EN-US style='color:#880000'>_strnicmp</span><span lang=EN-US>(pNode-&gt;</span><span
lang=EN-US style='color:#880000'>GetName</span><span lang=EN-US>(), </span><span
lang=EN-US style='color:fuchsia'>&quot;Bip&quot;</span><span lang=EN-US>, </span><span
lang=EN-US style='color:red'>3</span><span lang=EN-US>))</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pGeo-&gt;nType
= </span><span lang=EN-US style='color:#A000A0'>LCX_BONE</span><span
lang=EN-US>;</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>다음으로 지역 행렬<span lang=EN-US>, </span>메쉬 정보를 추출하고 마지막 단계에서 다음과
같이 애니메이션에 대한 행렬을 추출합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:blue'>typedef</span><span
lang=EN-US> </span><span lang=EN-US style='color:blue'>D3DXMATRIX</span><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; </span><span lang=EN-US style='color:blue'>MATA</span><span
lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>void</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>LcMax</span><span lang=EN-US>::</span><span lang=EN-US
style='color:#880000'>SetupAnimation</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>LcGeo</span><span lang=EN-US>* pGeo)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; nAni
= m_Header.nFrmE - m_Header.nFrmB +</span><span lang=EN-US style='color:red'>1</span><span
lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>INode</span><span lang=EN-US>*&nbsp; pNode =
pGeo-&gt;pNode;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>INode</span><span lang=EN-US>*&nbsp; pPrnt =
pNode-&gt;</span><span lang=EN-US style='color:#880000'>GetParentNode</span><span
lang=EN-US>();</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pGeo-&gt;nAni&nbsp;&nbsp;&nbsp;&nbsp; =
nAni;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pGeo-&gt;pAni&nbsp;&nbsp;&nbsp;&nbsp; =
</span><span lang=EN-US style='color:blue'>new</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>MATA</span><span lang=EN-US>[nAni];</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dTime
= dTimeB;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; i&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; =
</span><span lang=EN-US style='color:red'>0</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>for</span><span lang=EN-US>(; dTime&lt;=dTimeE ;
dTime += dTick, ++i)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=PT-BR>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=PT-BR style='color:blue'>MATA</span><span lang=PT-BR>* pDest =
&amp;pGeo-&gt;pAni[i];</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=PT-BR style='color:blue'>Matrix3</span><span lang=PT-BR> tmLocal;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>Matrix3</span><span lang=EN-US> tmWorld =
pNode-&gt;</span><span lang=EN-US style='color:#880000'>GetObjTMAfterWSM</span><span
lang=EN-US>(dTime);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>(!pPrnt)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tmLocal
= tmWorld;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>else</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>Matrix3</span><span lang=EN-US> tmParent=
pPrnt-&gt;</span><span lang=EN-US style='color:#880000'>GetObjTMAfterWSM</span><span
lang=EN-US>(dTime);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tmLocal
= tmWorld * </span><span lang=EN-US style='color:#880000'>Inverse</span><span
lang=EN-US>(tmParent);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>MaxMatrixToD3D</span><span lang=EN-US>(pDest,
&amp;tmLocal);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>애니메이션에 대한 지역 행렬은 이전의 <span lang=EN-US>transform </span>예제처럼 다음
공식을 이용합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><i>애니메이션 지역 행렬<span lang=EN-US> = </span>노드의 애니메이션 월드 행렬<span
lang=EN-US> * </span>부모 애니메이션 월드 행렬의 역행렬</i></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>GetObjTMAfterWSM() </span>함수는 주어진 시간에서 <span
lang=EN-US>Modifier</span>에 의한 월드 행렬을 반환 하므로 이를 이용해서 각 노드의 월드 행렬을 구한 후에 공식에 적용해서
시간에 대한 지역 행렬을 만들어 냅니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>파일에 저장할 때는 애니메이션 정보는 메쉬 정보를 저장한 다음에 저장합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>void</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>LcMax</span><span lang=EN-US>::</span><span lang=EN-US
style='color:#880000'>WriteBinary</span><span lang=EN-US>()</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Write Geometry</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Write Animation</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>for</span><span lang=EN-US>(n =</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>; n&lt;m_Header.nGeo;
++n)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=PT-BR style='color:blue'>LcGeo</span><span lang=EN-US>* pGeo =
&amp;m_pGeo[n];</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>(</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>&gt;pGeo-&gt;nAni)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>continue</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>fwrite</span><span lang=EN-US>(pGeo-&gt;pAni,
pGeo-&gt;nAni, </span><span lang=EN-US style='color:blue'>sizeof</span><span
lang=EN-US>(</span><span lang=EN-US style='color:blue'>MATA</span><span
lang=EN-US>), fp);&nbsp;&nbsp;&nbsp; </span><span lang=EN-US style='color:green'>//
Animation Matrix</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>전체 코드는 <span lang=EN-US><a href="https://github.com/3dapi/dv01_max/raw/master/mxp21_ani_rigid1.zip">mxp21_ani_rigid1.zip</a></span>을
참고 하기 바랍니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이렇게 만든 데이터를 게임에 적용하려면 먼저 애니메이션 행렬의 인덱스를 구해야 합니다<span
lang=EN-US>. </span>이 인덱스는 시간을<span lang=EN-US> Frame</span>으로 나누고 다시 전체 프레임으로<span
lang=EN-US> Modular </span>연산자<span lang=EN-US>(%)</span>를 이용하면 최대 프레임을 넘지 않고 반복된
애니메이션을 구현할 수 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>m_nAni = </span><span
lang=EN-US style='color:blue'>INT</span><span lang=EN-US>(
dTime/m_Header.nFrmP);</span></p>

<p class=MsoNormal><span lang=EN-US>m_nAni %= m_Header.nFrmE;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>플러그인으로 추출한 애니메이션 행렬은 애니메이션 지역 행렬이므로 다음 공식과 같이 애니메이션에 대한 월드 행렬을
구합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><i>노드의 애니메이션 월드 행렬<span lang=EN-US> = </span>노드의 애니메이션 지역 행렬<span
lang=EN-US> * </span>부모의 애니메이션 월드 행렬</i></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이것은 이전의<span lang=EN-US> transform </span>예제와 거의 같으며 <span
lang=EN-US><a href="https://github.com/3dapi/dv01_max/raw/master/mxp21_viewer_rigid1.zip">mxp21_viewer_rigid1.zip</a></span>은
다음과 같이 이 공식을 구현하고 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>INT</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>CLcmAcm</span><span lang=EN-US>::</span><span lang=EN-US
style='color:#880000'>FrameMove</span><span lang=EN-US>()</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_TimeC
= </span><span lang=EN-US style='color:#880000'>GetTickCount</span><span
lang=EN-US>();</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>DWORD</span><span lang=EN-US> dTime = m_TimeC -
m_TimeB;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_nAni
= </span><span lang=EN-US style='color:blue'>INT</span><span lang=EN-US>(
dTime/m_Header.nFrmP);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_nAni
%= m_Header.nFrmE;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>for</span><span lang=EN-US>(i=</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>; i&lt;m_Header.nGeo;
++i)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>LcGeo</span><span lang=EN-US>*&nbsp; pCur =
&amp;m_pGeo[i];</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>LcGeo</span><span lang=EN-US>*&nbsp; pPrn =
pCur-&gt;pPrn;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>D3DXMatrixIdentity</span><span lang=EN-US>(&amp;pCur-&gt;mtWld);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>(pPrn)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>(pCur-&gt;pAni)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pCur-&gt;mtWld
= pCur-&gt;pAni[m_nAni]* pPrn-&gt;mtWld;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>else</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pCur-&gt;mtWld
= pCur-&gt;mtLcl * pPrn-&gt;mtWld;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>else</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pCur-&gt;mtWld
= m_mtWld;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><a href="https://github.com/3dapi/dv01_max/raw/master/mxp21_viewer_rigid1.zip">mxp21_viewer_rigid1.zip</a></span>를
실행하면 다음과 같은 화면을 얻을 수 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=272 height=204
src="https://github.com/3dapi/bs25_shader1/raw/master/dv01_max.files/image031.gif">&nbsp;<img border=0 width=272 height=204
src="https://github.com/3dapi/bs25_shader1/raw/master/dv01_max.files/image032.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>강체 애니메이션<span lang=EN-US>: <a
href="https://github.com/3dapi/dv01_max/raw/master/mxp21_viewer_rigid1.zip">mxp21_viewer_rigid1.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:14.0pt'>5.3.2 Skinning
Animation </span><span style='font-size:14.0pt'>플러그인</span></p>

<p class=MsoNormal>스키닝 애니메이션에 대한 플러그인 제작은 글을 쓰고 있는 저도 많은 좌절을 겪었던 부분입니다<span
lang=EN-US>. </span>다행히도<span lang=EN-US> Game Programming Gems 2 </span>권<span
lang=EN-US> 1.21 </span>장<span lang=EN-US> &quot;</span>스킨 익스포터<span
lang=EN-US>&quot; </span>부분에서<span lang=EN-US> Physique</span>에서 정점에 대한<span
lang=EN-US> Bone</span>의 비중<span lang=EN-US>(Weight)</span>과 인덱스를 구하는 방법이 소개되어 있고<span
lang=EN-US>, </span>이것을 연구해서<span lang=EN-US> Physique</span>와 <span
lang=EN-US>SKIN </span>두 부분 모두에 대한 플러그인을 작성할 수 있었습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>만약 <span lang=EN-US>PHYSIQUE/SKIN </span>이 적용된 플러그인을 제작한다면 제일
먼저 정점의 위치를 추출하는 부분을 다음과 같이 수정해야 합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:blue'>Matrix3</span><span
lang=EN-US> tmWSM = pNode-&gt;</span><span lang=EN-US style='color:#880000'>GetObjTMAfterWSM</span><span
lang=EN-US>(</span><span lang=EN-US style='color:red'>0</span><span lang=EN-US>);
</span><span lang=EN-US style='color:green'>// </span><span style='color:green'>또는
<span lang=EN-US>tmWSM = pNode-&gt;GetObjectTM(0);</span></span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:blue'>for</span><span lang=PT-BR> (n=</span><span lang=PT-BR
style='color:red'>0</span><span lang=PT-BR>; n&lt;iNvtx; ++n)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=PT-BR style='color:blue'>Point3</span><span lang=PT-BR> v = tmWSM * pMesh-&gt;verts[n];&nbsp;&nbsp; </span><span
lang=PT-BR style='color:green'>// </span><span style='color:green'>변환된</span><span
style='color:green'> </span><span style='color:green'>정점을</span><span
style='color:green'> </span><span style='color:green'>사용</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pGeo-&gt;pPos[n].x
= v.x;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pGeo-&gt;pPos[n].y
= v.z;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pGeo-&gt;pPos[n].z
= v.y;</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이전의 강체 애니메이션에서는 변환하지 않은 정점을 사용했으나 스키닝이 적용되는 정점은 시작 시간<span
lang=EN-US> (Zero Time)</span>의 행렬을 적용해서 사용합니다<span lang=EN-US>. </span>이것은 리깅 작업에
의해 변환된 모델링 데이터의 정점을 사용하는 것을 의미합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>PHYSIQUE/SKIN </span>에서<span lang=EN-US>
Bone</span>의 인덱스와 비중을 구하는 방법을 간단히 설명하면 첫 번째로<span lang=EN-US> PHYSIQUE/SKIN</span>에
대한 수정자<span lang=EN-US>(Modifier) </span>찾고<span lang=EN-US>, </span>그 다음으로 수정자에서<span
lang=EN-US> PHYSIQUE/SKIN </span>객체를 얻는 것입니다<span lang=EN-US>. </span>세 번째로<span
lang=EN-US> PHYSIQUE/SKIN </span>객체에서 문맥<span lang=EN-US>(Context)</span>를 얻고 이
문맥에서 영향 받는 정점의 수를 구하고 이 수만큼<span lang=EN-US> Loop</span>를 돌면서 이 문맥에 연결된 정점을 얻고 이
정점에 연결된 노드와 비중을 구합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>수정자의 역할은 객체의 변환이며 여러 수정자들이 객체에 적용이 되어 장면에 대해서 객체의 최종적인 결과물<span
lang=EN-US>(</span>외형<span lang=EN-US>)</span>을 만들어냅니다<span lang=EN-US>. </span>이러한
이유로 수정자들에 의한 객체의 변환 과정을 객체의 파이프라인이라 부르기도 합니다<span lang=EN-US>. </span>각각의 노드는 수정자들에
의해 변환된 최종 객체<span lang=EN-US>(Derived Object)</span>가 연결되어 있고 이 최종 객체는 맥스의 수정자 스택
시스템이 적용된 결과 입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>우리는 이 수정자 스택을 탐색하면서 다음과 같이 수정자<span lang=EN-US>(Modifier)</span>를
찾으면 됩니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>void</span><span lang=EN-US>* </span><span lang=EN-US
style='color:blue'>LcMax</span><span lang=EN-US>::</span><span lang=EN-US
style='color:#880000'>FindModifier</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>INode</span><span lang=EN-US> *pNode, </span><span
lang=EN-US style='color:blue'>Class_ID</span><span lang=EN-US> nType)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>노드에 연결된 오브젝트를
구한다<span lang=EN-US>.</span></span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>Object</span><span lang=EN-US>* ObjectPtr =
pNode-&gt;</span><span lang=EN-US style='color:#880000'>GetObjectRef</span><span
lang=EN-US>();</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>(!ObjectPtr)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> </span><span
lang=EN-US style='color:#A000A0'>NULL</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Derived </span><span style='color:green'>오브젝트라면
이 오브젝트에서 수정자를 찾는다<span lang=EN-US>.</span></span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>while</span><span lang=EN-US>(ObjectPtr
&amp;&amp; ObjectPtr-&gt;</span><span lang=EN-US style='color:#880000'>SuperClassID</span><span
lang=EN-US>() == </span><span lang=EN-US style='color:#A000A0'>GEN_DERIVOB_CLASS_ID</span><span
lang=EN-US>)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>IDerivedObject</span><span lang=EN-US>
*pDerivedObj = (</span><span lang=EN-US style='color:blue'>IDerivedObject</span><span
lang=EN-US> *)ObjectPtr;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>수정자 스택을 전부 탐색한다<span
lang=EN-US>.</span></span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>int</span><span lang=EN-US> ModStackIndex = </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>while</span><span lang=EN-US>(ModStackIndex &lt;
pDerivedObj-&gt;</span><span lang=EN-US style='color:#880000'>NumModifiers</span><span
lang=EN-US>())</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>스택 인덱스에 대한 수정자를
얻는다<span lang=EN-US>.</span></span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>Modifier</span><span lang=EN-US>* ModifierPtr =
pDerivedObj-&gt;</span><span lang=EN-US style='color:#880000'>GetModifier</span><span
lang=EN-US>(ModStackIndex);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>//</span><span style='color:green'>이 수정자의 아이디가 <span
lang=EN-US>PHYSIQUE </span>또는<span lang=EN-US> SKIN</span>인지 비교한다<span
lang=EN-US>.</span></span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>(nType ==
ModifierPtr-&gt;</span><span lang=EN-US style='color:#880000'>ClassID</span><span
lang=EN-US>())</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> ModifierPtr;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>수정자가 <span
lang=EN-US>PHYSIQUE </span>또는<span lang=EN-US> SKIN</span>이 아니면 인덱스를 올린다<span
lang=EN-US>.</span></span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ModStackIndex++;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Derived </span><span style='color:green'>오브젝트에
연결된 다른 오브젝트를 얻는다<span lang=EN-US>.</span></span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ObjectPtr
= pDerivedObj-&gt;</span><span lang=EN-US style='color:#880000'>GetObjRef</span><span
lang=EN-US>();</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>발견 못함<span
lang=EN-US>.</span></span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> </span><span
lang=EN-US style='color:#A000A0'>NULL</span><span lang=EN-US>;</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>Derived </span>객체를 통해서 구한 수정자<span
lang=EN-US>(Modifier) </span>안의 문맥<span lang=EN-US>(Context)</span>를 구하면<span
lang=EN-US> Bone</span>의 영향도를 구할 수 있습니다<span lang=EN-US>. </span>문맥을 구하는 방법은 수정자에서<span
lang=EN-US> PHYSIQUE/SKIN </span>객체를 얻고 이 객체에서 문맥을 다음과 같이 얻습니다<span lang=EN-US
style='color:green'>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>IPhysiqueExport(</span>또는 <span lang=EN-US style='color:
blue'>ISkin)</span><span lang=EN-US>*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US>pExport</span><span lang=EN-US> = </span><span lang=EN-US
style='color:#A000A0'>NULL</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>IPhyContextExport(</span>또는 <span lang=EN-US
style='color:blue'>ISkinContextData)</span><span lang=EN-US>*&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US>pContext</span><span lang=EN-US> = </span><span lang=EN-US
style='color:#A000A0'>NULL</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>pExport</span><span
lang=EN-US> = </span><span lang=EN-US>pMod</span><span lang=EN-US>-&gt;</span><span
lang=EN-US style='color:#880000'>GetInterface</span><span lang=EN-US>(</span><span
lang=EN-US style='color:#A000A0'>I_PHYINTERFACE/I_SKIN</span><span lang=EN-US>); </span><span
lang=EN-US style='color:green'>// PHYSIQUE/SKIN </span><span style='color:green'>객체</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>pContext</span><span
lang=EN-US> = </span><span lang=EN-US>pExport</span><span lang=EN-US>-&gt;</span><span
lang=EN-US style='color:#880000'>GetContextInterface</span><span lang=EN-US>(</span><span
lang=EN-US>pNode</span><span lang=EN-US>);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Context</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>문맥을 얻고 나서<span lang=EN-US> PHYSIQUE</span>에만 문맥에 대해서<span
lang=EN-US> Rigid</span>변경과 블렌딩 활성화를 지시합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>pContext-&gt;</span><span
lang=EN-US style='color:#880000'>ConvertToRigid</span><span lang=EN-US>(</span><span
lang=EN-US style='color:#A000A0'>TRUE</span><span lang=EN-US>);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Context</span><span style='color:green'>에 대해서<span
lang=EN-US> Rigid</span>로 변경</span></p>

<p class=MsoNormal><span lang=EN-US>pContext-&gt;</span><span lang=EN-US
style='color:#880000'>AllowBlending</span><span lang=EN-US>(</span><span
lang=EN-US style='color:#A000A0'>TRUE</span><span lang=EN-US>);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>정점<span
lang=EN-US> Blending </span>활성화</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>다음으로 <span lang=EN-US>Bone</span>에 영향 받는 정점의 수를 구합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>int</span><span lang=EN-US> nVtx = pContext-&gt;</span><span
lang=EN-US style='color:#880000'>GetNumberVertices</span><span lang=EN-US>();&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Bone</span><span style='color:green'>에 영향 받는 정점의
개수</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>이 정점의 수는 실제로<span lang=EN-US>
Geometry</span>의 정점 개수와 일치합니다<span lang=EN-US>. </span>이 개수만큼 다음과 같이<span
lang=EN-US> for </span>문 안에서 문맥에서<span lang=EN-US> Bone</span>의 인덱스와 비중을 구합니다<span
lang=EN-US>. </span>주의할 것은 <span lang=EN-US>RIGID_TYPE </span>이면 비중을 <span
lang=EN-US>1</span>로 하며 너무 작은 값이면 무시를 합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:green'>// PHYSIQUE</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>for</span><span lang=EN-US>(</span><span lang=EN-US
style='color:blue'>int</span><span lang=EN-US> </span><span lang=EN-US>j</span><span
lang=EN-US>=</span><span lang=EN-US style='color:red'>0</span><span lang=EN-US>;
</span><span lang=EN-US>j</span><span lang=EN-US>&lt;</span><span lang=EN-US>nVtx</span><span
lang=EN-US>; ++</span><span lang=EN-US>j</span><span lang=EN-US>)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>IPhyVertexExport</span><span lang=EN-US>* </span><span
lang=EN-US>pPhyVtxExpt</span><span lang=EN-US> = </span><span lang=EN-US>pContext</span><span
lang=EN-US>-&gt;</span><span lang=EN-US style='color:#880000'>GetVertexInterface</span><span
lang=EN-US>(</span><span lang=EN-US>j</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>IPhyBlendedRigidVertex</span><span lang=EN-US>* </span><span
lang=EN-US>pPhyBlend </span><span lang=EN-US>= </span><span lang=EN-US>pPhyVtxExpt</span><span
lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>(</span><span
lang=EN-US style='color:#A000A0'>RIGID_TYPE</span><span lang=EN-US> == </span><span
lang=EN-US>pPhyVtxExpt</span><span lang=EN-US>-&gt;</span><span lang=EN-US
style='color:#880000'>GetVertexType</span><span lang=EN-US>())</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>INode</span><span lang=EN-US>*&nbsp; </span><span
lang=EN-US>pBone</span><span lang=EN-US>&nbsp;&nbsp; = ((</span><span
lang=EN-US style='color:blue'>IPhyRigidVertex</span><span lang=EN-US>*)</span><span
lang=EN-US>pPhyVtxExpt</span><span lang=EN-US>)-&gt;</span><span lang=EN-US
style='color:#880000'>GetNode</span><span lang=EN-US>();</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>INT</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US>nBone</span><span lang=EN-US>&nbsp;&nbsp; = </span><span lang=EN-US
style='color:#880000'>FindBoneId</span><span lang=EN-US>(</span><span
lang=EN-US>pBone</span><span lang=EN-US>); </span><span lang=EN-US
style='color:green'>//</span><span style='color:green'>본 인덱스</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>FLOAT</span><span lang=EN-US>&nbsp;&nbsp; </span><span
lang=EN-US>fWgt</span><span lang=EN-US>&nbsp;&nbsp;&nbsp; = </span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>.</span><span lang=EN-US>f</span><span
lang=EN-US>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>//RIGID_TYPE</span><span style='color:green'>는<span
lang=EN-US> Weight=1</span></span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US>pGeo</span><span lang=EN-US>-&gt;</span><span lang=EN-US>pBlnd</span><span
lang=EN-US>[</span><span lang=EN-US>j</span><span lang=EN-US>].</span><span
lang=EN-US>vB</span><span lang=EN-US>.</span><span lang=EN-US style='color:
#880000'>insert</span><span lang=EN-US>(</span><span lang=EN-US
style='color:blue'>std</span><span lang=EN-US>::</span><span lang=EN-US
style='color:blue'>pair</span><span lang=EN-US>&lt;</span><span lang=EN-US
style='color:blue'>INT</span><span lang=EN-US>, </span><span lang=EN-US
style='color:blue'>FLOAT</span><span lang=EN-US>&gt;(</span><span lang=EN-US>nBone</span><span
lang=EN-US>, </span><span lang=EN-US>fWgt</span><span lang=EN-US>));</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>continue</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>int</span><span lang=EN-US> </span><span
lang=EN-US>numBones</span><span lang=EN-US> = </span><span lang=EN-US>pPhyBlend</span><span
lang=EN-US>-&gt;</span><span lang=EN-US style='color:#880000'>GetNumberNodes</span><span
lang=EN-US>();</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>for</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>int</span><span lang=EN-US> </span><span
lang=EN-US>k</span><span lang=EN-US> = </span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>; </span><span lang=EN-US>k</span><span
lang=EN-US>&lt; </span><span lang=EN-US>numBones</span><span lang=EN-US>; ++</span><span
lang=EN-US>k</span><span lang=EN-US>)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// k</span><span style='color:green'>번째의 본을 찾는다<span
lang=EN-US>.</span></span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>INode</span><span lang=EN-US>*&nbsp; </span><span
lang=EN-US>pBone</span><span lang=EN-US>&nbsp;&nbsp; = </span><span lang=EN-US>pPhyBlend</span><span
lang=EN-US>-&gt;</span><span lang=EN-US style='color:#880000'>GetNode</span><span
lang=EN-US>(</span><span lang=EN-US>k</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>INT</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US>nBone</span><span lang=EN-US>&nbsp;&nbsp; = </span><span lang=EN-US
style='color:#880000'>FindBoneId</span><span lang=EN-US>(</span><span
lang=EN-US>pBone</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>FLOAT</span><span lang=EN-US>&nbsp;&nbsp; </span><span
lang=EN-US>fWgt</span><span lang=EN-US>&nbsp;&nbsp;&nbsp; = </span><span
lang=EN-US>pPhyBlend</span><span lang=EN-US>-&gt;</span><span lang=EN-US
style='color:#880000'>GetWeight</span><span lang=EN-US>(</span><span
lang=EN-US>k</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>값이 작으면 무시</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>(</span><span
lang=EN-US>fWgt</span><span lang=EN-US>&lt;</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>00005f</span><span lang=EN-US>)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>continue</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US>pGeo</span><span lang=EN-US>-&gt;</span><span lang=EN-US>pBlnd</span><span
lang=EN-US>[</span><span lang=EN-US>j</span><span lang=EN-US>].</span><span
lang=EN-US>vB</span><span lang=EN-US>.</span><span lang=EN-US style='color:
#880000'>insert</span><span lang=EN-US>(</span><span lang=EN-US
style='color:blue'>std</span><span lang=EN-US>::</span><span lang=EN-US
style='color:blue'>pair</span><span lang=EN-US>&lt;</span><span lang=EN-US
style='color:blue'>INT</span><span lang=EN-US>, </span><span lang=EN-US
style='color:blue'>FLOAT</span><span lang=EN-US>&gt;(</span><span lang=EN-US>nBone</span><span
lang=EN-US>, </span><span lang=EN-US>fWgt</span><span lang=EN-US>));</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:green'>// SKIN</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>for</span><span lang=EN-US>(</span><span lang=EN-US
style='color:blue'>int</span><span lang=EN-US> </span><span lang=EN-US>j</span><span
lang=EN-US>=</span><span lang=EN-US style='color:red'>0</span><span lang=EN-US>;
</span><span lang=EN-US>j</span><span lang=EN-US>&lt;</span><span lang=EN-US>nVtx</span><span
lang=EN-US>;&nbsp; ++</span><span lang=EN-US>j</span><span lang=EN-US>)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>int</span><span lang=EN-US> </span><span
lang=EN-US>numBones</span><span lang=EN-US> = </span><span lang=EN-US>pContext</span><span
lang=EN-US>-&gt;</span><span lang=EN-US style='color:#880000'>GetNumAssignedBones</span><span
lang=EN-US>(</span><span lang=EN-US>j</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>for</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>int</span><span lang=EN-US> </span><span
lang=EN-US>k</span><span lang=EN-US>=</span><span lang=EN-US style='color:red'>0</span><span
lang=EN-US>; </span><span lang=EN-US>k</span><span lang=EN-US>&lt;</span><span
lang=EN-US>numBones</span><span lang=EN-US>; ++</span><span lang=EN-US>k</span><span
lang=EN-US>)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>int</span><span lang=EN-US> </span><span
lang=EN-US>assignedBone</span><span lang=EN-US> = </span><span lang=EN-US>pContext</span><span
lang=EN-US>-&gt;</span><span lang=EN-US style='color:#880000'>GetAssignedBone</span><span
lang=EN-US>(</span><span lang=EN-US>j</span><span lang=EN-US>, </span><span
lang=EN-US>k</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>(</span><span
lang=EN-US>assignedBone</span><span lang=EN-US> &lt; </span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>continue</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>INode</span><span lang=EN-US>*&nbsp; </span><span
lang=EN-US>pBone</span><span lang=EN-US>&nbsp;&nbsp; = </span><span lang=EN-US>pExport</span><span
lang=EN-US>-&gt;</span><span lang=EN-US style='color:#880000'>GetBone</span><span
lang=EN-US>(</span><span lang=EN-US>assignedBone</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>INT</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US>nBone</span><span lang=EN-US>&nbsp;&nbsp; = </span><span lang=EN-US
style='color:#880000'>FindBoneId</span><span lang=EN-US>(</span><span
lang=EN-US>pBone</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>FLOAT</span><span lang=EN-US>&nbsp;&nbsp; </span><span
lang=EN-US>fWgt</span><span lang=EN-US>&nbsp;&nbsp;&nbsp; = </span><span
lang=EN-US>pContext</span><span lang=EN-US>-&gt;</span><span lang=EN-US
style='color:#880000'>GetBoneWeight</span><span lang=EN-US>(</span><span
lang=EN-US>j</span><span lang=EN-US>, </span><span lang=EN-US>k</span><span
lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>값이 작으면 무시</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>(</span><span
lang=EN-US>fWgt</span><span lang=EN-US>&lt;</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>00005f</span><span lang=EN-US>)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>continue</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US>pGeo</span><span lang=EN-US>-&gt;</span><span lang=EN-US>pBlnd</span><span
lang=EN-US>[</span><span lang=EN-US>j</span><span lang=EN-US>].</span><span
lang=EN-US>vB</span><span lang=EN-US>.</span><span lang=EN-US style='color:
#880000'>insert</span><span lang=EN-US>(</span><span lang=EN-US
style='color:blue'>std</span><span lang=EN-US>::</span><span lang=EN-US
style='color:blue'>pair</span><span lang=EN-US>&lt;</span><span lang=EN-US
style='color:blue'>INT</span><span lang=EN-US>, </span><span lang=EN-US
style='color:blue'>FLOAT</span><span lang=EN-US>&gt;(</span><span lang=EN-US>nBone</span><span
lang=EN-US>, </span><span lang=EN-US>fWgt</span><span lang=EN-US>));</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>PHYSIQUE/SKIN</span><span lang=EN-US> </span>에
대한 애니메이션 행렬을 구하는 방법은 강체 애니메이션과 차이가 있습니다<span lang=EN-US>. D3D</span>를 기준으로 애니메이션
행렬은 다음과 같이 계산 됩니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><i>애니메이션 월드 행렬<span lang=EN-US> = Pivot </span>행렬의 역행렬<span
lang=EN-US> * </span>시간에 대한 노드의 월드 행렬</i></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이것을 구현하려면 먼저 노드에 대한<span lang=EN-US> Pivot </span>행렬의 역행렬을 구합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>MATA</span><span lang=EN-US>&nbsp;&nbsp;&nbsp; mtPivot;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>Matrix3</span><span lang=EN-US> tmPivot = pNode-&gt;</span><span
lang=EN-US style='color:#880000'>GetNodeTM</span><span lang=EN-US>(</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>tmPivot.</span><span
lang=EN-US style='color:#880000'>Invert</span><span lang=EN-US>();</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#880000'>MaxMatrixToD3D</span><span
lang=EN-US>(&amp;mtPivot, &amp;tmPivot);</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>시간에 대해서 노드의 <span lang=EN-US>GetObjTMAfterWSM() </span>함수로 시간에
대한 노드의 월드 행렬을 구하고 앞의 공식을 다음과 같이 적용합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>for</span><span lang=EN-US>(n=</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>, dTime = dTimeB; dTime&lt;=dTimeE ;
dTime += dTick, ++n)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>MATA</span><span lang=EN-US>* pDest =
&amp;pGeo-&gt;pAni[n];</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>Matrix3</span><span lang=EN-US> tmWorld =
pNode-&gt;</span><span lang=EN-US style='color:#880000'>GetObjTMAfterWSM</span><span
lang=EN-US>(dTime);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tmWorld.</span><span
lang=EN-US style='color:#880000'>NoScale</span><span lang=EN-US>();</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>MATA</span><span lang=EN-US>&nbsp;&nbsp;&nbsp; mtAni;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>MaxMatrixToD3D</span><span lang=EN-US>(&amp;mtAni,
&amp;tmWorld);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mtAni&nbsp;
= mtPivot * mtAni;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *pDest
= mtAni;</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이 때 크기 변환이 적용되지 않도록<span lang=EN-US> &quot;tmWorld.NoScale();&quot;
</span>구문을 꼭 넣는 것이 가장 중요합니다<span lang=EN-US>. </span>또한 애니메이션은 계층 구조를 적용하지 않고 곧
바로 월드 변환을 이용하고 있는 것 또한 주의해야 합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>계층 구조가 아닌 월드 변환을 이용하게 되면 플러그인에서 만든 데이터를 게임에서 애니메이션을 구현할 때 다음과
같이 적용해야 합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>DWORD</span><span lang=EN-US>&nbsp;&nbsp; m_TimeB;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Start Time</span></p>

<p class=MsoNormal><span lang=EN-US style='color:blue'>DWORD</span><span
lang=EN-US>&nbsp;&nbsp; m_TimeC;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Current Time</span></p>

<p class=MsoNormal><span lang=EN-US style='color:blue'>INT</span><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; m_nAni;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Animation Index</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal><span lang=EN-US style='color:blue'>INT</span><span
lang=EN-US> </span><span lang=EN-US style='color:blue'>CLcmAcm</span><span
lang=EN-US>::</span><span lang=EN-US style='color:#880000'>FrameMove</span><span
lang=EN-US>()</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>m_TimeC = </span><span
lang=EN-US style='color:#880000'>GetTickCount</span><span lang=EN-US>();</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>DWORD</span><span lang=EN-US> dTime = m_TimeC - m_TimeB;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>m_nAni = </span><span
lang=EN-US style='color:blue'>INT</span><span lang=EN-US>( dTime/m_Header.nFrmP);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>m_nAni %=
m_Header.nFrmE;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:green'>// World </span><span style='color:green'>행렬 업데이트</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:blue'>for</span><span lang=PT-BR>(n=</span><span lang=PT-BR
style='color:red'>0</span><span lang=PT-BR>; n&lt;m_Header.nGeo; ++n)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=PT-BR style='color:blue'>LcGeo</span><span lang=PT-BR>*&nbsp; pGeo&nbsp;&nbsp;&nbsp; =
&amp;m_pGeo[n];</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=PT-BR style='color:blue'>MATA</span><span lang=PT-BR>&nbsp;&nbsp;&nbsp; mtAni;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=PT-BR style='color:#880000'>D3DXMatrixIdentity</span><span lang=PT-BR>(&amp;mtAni);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=PT-BR style='color:blue'>if</span><span lang=PT-BR>(pGeo-&gt;pAni)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mtAni
= pGeo-&gt;pAni[m_nAni];</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:40.0pt;word-break:keep-all'><span
lang=EN-US style='color:green'>// World </span><span style='color:green'>행렬 설정</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; …</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이것으로<span lang=EN-US> PHYSIQUE/SKIN</span>에 대한 정점의 위치<span
lang=EN-US>, Bone </span>인덱스와 비중<span lang=EN-US>, </span>애니메이션에 대한 플러그인에서 중용한 부분을
살펴보았습니다<span lang=EN-US>. </span>전체 코드는 <span lang=EN-US><a
href="https://github.com/3dapi/dv01_max/raw/master/mxp23_skinning.zip">mxp23_skinning.zip</a></span>를 참고하기 바랍니다<span
lang=EN-US>. </span>다음은 이 플러그인으로 추출한 데이터를<span lang=EN-US> D3D </span>에서 스키닝 애니메이션으로
구현해볼 차례입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:14.0pt'>5.3.3 Skinning
Animation</span></p>

<p class=MsoNormal>스키닝 애니메이션 구현은 이미 고정 기능 파이프라인에서<span lang=EN-US> DirectX</span>의<span
lang=EN-US> X-File</span>을 가지고 해 본적이 있습니다<span lang=EN-US>. </span>하나의 정점 <span
lang=EN-US><sub><img border=0 width=13 height=21
src="https://github.com/3dapi/bs25_shader1/raw/master/dv01_max.files/image033.gif"></sub></span>에 영향을 주는 행렬을 <span lang=EN-US><sub><img
border=0 width=23 height=25 src="https://github.com/3dapi/bs25_shader1/raw/master/dv01_max.files/image034.gif"></sub>, </span>비중을
<span lang=EN-US><sub><img border=0 width=23 height=23
src="https://github.com/3dapi/bs25_shader1/raw/master/dv01_max.files/image035.gif"></sub></span>라 하면 변환 후의 정점 위치 <span
lang=EN-US><sub><img border=0 width=16 height=21
src="https://github.com/3dapi/bs25_shader1/raw/master/dv01_max.files/image036.gif"></sub></span>는 다음과 같이 계산이 되고<span lang=EN-US>,</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><sub><img border=0 width=129 height=37
src="https://github.com/3dapi/bs25_shader1/raw/master/dv01_max.files/image037.gif"></sub></span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>괄호 안의 점 <span lang=EN-US><sub><img border=0 width=13
height=21 src="https://github.com/3dapi/bs25_shader1/raw/master/dv01_max.files/image033.gif"></sub></span>은 Σ밖으로 빼내올 수 있고<span
lang=EN-US>, </span>수식을 정리하면</p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><sub><img border=0 width=249 height=48
src="https://github.com/3dapi/bs25_shader1/raw/master/dv01_max.files/image038.gif"></sub>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><sub><img border=0 width=208 height=48
src="https://github.com/3dapi/bs25_shader1/raw/master/dv01_max.files/image039.gif"></sub>,&nbsp; <sub><img border=0 width=63
height=36 src="https://github.com/3dapi/bs25_shader1/raw/master/dv01_max.files/image040.gif"></sub></span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이 되며 <span lang=EN-US><sub><img border=0 width=53 height=25
src="https://github.com/3dapi/bs25_shader1/raw/master/dv01_max.files/image041.gif"></sub>&nbsp;</span>를 각각 수행하고 이들을 더한 최종 행렬을 <span
lang=EN-US><sub><img border=0 width=105 height=37
src="https://github.com/3dapi/bs25_shader1/raw/master/dv01_max.files/image042.gif"></sub></span>으로 계산한다고 했습니다<span lang=EN-US>. </span>이
내용을<span lang=EN-US> CPU</span>에 의한 소프트웨어<span lang=EN-US>(Software) </span>방법<span
lang=EN-US>, GPU</span>에 의한 하드웨어 지원 방법<span lang=EN-US>, </span>그리고 쉐이더를 이용한 방법<span
lang=EN-US>, 3</span>가지로 나누어서 적용해 봅시다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>먼저 소프트웨어적인 방법입니다<span lang=EN-US>. </span>우리의 목표는 <span
lang=EN-US><sub><img border=0 width=23 height=21
src="https://github.com/3dapi/bs25_shader1/raw/master/dv01_max.files/image043.gif"></sub></span>을 구하는 것입니다<span lang=EN-US>. </span>다음의
코드에서 <span lang=EN-US><sub><img border=0 width=23 height=21
src="https://github.com/3dapi/bs25_shader1/raw/master/dv01_max.files/image043.gif"></sub></span>은 이중<span lang=EN-US> for</span>문
안의 <span lang=EN-US>mtW </span>변수 입니다<span lang=EN-US>. <sub><img border=0
width=23 height=21 src="https://github.com/3dapi/bs25_shader1/raw/master/dv01_max.files/image043.gif"></sub>&nbsp;(mtW)</span>는 누적되어야
하므로 변수를 선언하고 나서<span lang=EN-US> memset() </span>함수로 전부<span lang=EN-US> 0</span>으로
초기화 합니다<span lang=EN-US>. </span></p>

<p class=MsoNormal>다음으로 <span lang=EN-US><sub><img border=0 width=53 height=25
src="https://github.com/3dapi/bs25_shader1/raw/master/dv01_max.files/image041.gif"></sub>&nbsp;</span>를 적용하는 것인데 이것에 해당하는 부분은 코드의
<span lang=EN-US>&quot;mtT * fW&quot; </span>입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>이렇게 <span lang=EN-US><sub><img border=0 width=23 height=21
src="https://github.com/3dapi/bs25_shader1/raw/master/dv01_max.files/image043.gif"></sub></span>을 구했으면 마지막으로 <span lang=EN-US><sub><img
border=0 width=68 height=25 src="https://github.com/3dapi/bs25_shader1/raw/master/dv01_max.files/image044.gif"></sub>&nbsp;</span>를
적용해야 합니다<span lang=EN-US>. </span>이것은 원본 정점은 그대로 두고 원본을 복사한 정점의 위치를 변경하는 <span
lang=EN-US>D3DXVec3TransformCoord(…); </span>부분입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:blue'>INT</span><span
lang=EN-US> </span><span lang=EN-US style='color:blue'>CLcmAcm</span><span
lang=EN-US>::</span><span lang=EN-US style='color:#880000'>FrameMove</span><span
lang=EN-US>()</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:blue'>LcGeo</span><span lang=PT-BR>*&nbsp; pGeo&nbsp;&nbsp;&nbsp; =
&amp;m_pGeo[n];</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>for</span><span lang=EN-US>(j=</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>; j&lt;pGeo-&gt;nBlnd; ++j)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>LcmBone</span><span lang=EN-US>*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pBlnd
= &amp;pGeo-&gt;pBlnd[j];</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>INT</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; iBone
= pBlnd-&gt;vB.</span><span lang=EN-US style='color:#880000'>size</span><span
lang=EN-US>();</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>MATA</span><span lang=EN-US>&nbsp;&nbsp;&nbsp; mtW;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>memset</span><span lang=EN-US>(&amp;mtW, </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>, </span><span
lang=EN-US style='color:blue'>sizeof</span><span lang=EN-US>(mtW));</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>for</span><span lang=EN-US>(k=</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>; k&lt;iBone; ++k)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>FLOAT</span><span lang=EN-US>&nbsp;&nbsp; fW
=pBlnd-&gt;vB[k].fW;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>INT</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; nM
=pBlnd-&gt;vB[k].nB;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>MATA</span><span lang=EN-US>&nbsp;&nbsp;&nbsp; mtT
= m_pGeo[nM].mtWld;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mtW
+= (mtT * fW);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>D3DXVec3TransformCoord</span><span lang=EN-US>(&amp;pGeo-&gt;pVxD[j].p,
&amp;pGeo-&gt;pVtx[j].p, &amp;mtW);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>렌더링에서는 오브젝트 자체의 월드 행렬도 다음과 같이 적용되어야 합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:blue'>void</span><span
lang=EN-US> </span><span lang=EN-US style='color:blue'>CLcmAcm</span><span
lang=EN-US>::</span><span lang=EN-US style='color:#880000'>Render</span><span
lang=EN-US>()</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal><span lang=EN-US style='color:blue'>VtxPos</span><span
lang=EN-US>* pVtx&nbsp;&nbsp;&nbsp; = </span><span lang=EN-US style='color:
#A000A0'>NULL</span><span lang=EN-US>;</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal><span lang=EN-US>pVtx= pGeo-&gt;pVxD;</span></p>

<p class=MsoNormal><span lang=EN-US>m_pDev-&gt;</span><span lang=EN-US
style='color:#880000'>SetTransform</span><span lang=EN-US>(</span><span
lang=EN-US style='color:#A000A0'>D3DTS_WORLD</span><span lang=EN-US>,
&amp;m_mtWld);</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal><span lang=EN-US>m_pDev-&gt;</span><span lang=EN-US
style='color:#880000'>DrawIndexedPrimitiveUP</span><span lang=EN-US>(…, pVtx, );</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>전체 코드는 <span lang=EN-US><a
href="https://github.com/3dapi/dv01_max/raw/master/mxp23_skinning_view1_soft.zip">mxp23_skinning_view1_soft.zip</a></span>을 참고
하기 바랍니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>소프트웨어 처리 방법은 하드웨어의 성능에 상관없이 동작한다는 장점이 있지만 정점의 복사본을 가지고 있어야 하기
때문에 객체가 많아지면 사용 메모리가 객체에 비례해서 늘어나고<span lang=EN-US>, </span>정점의 개수가 많아질수록 연산 량도
증가한다는 단점이 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>새로운 객체가 이전 객체와 같은 형태의 오브젝트의 경우 정점을 복사하지 않고 스키닝 애니메이션 행렬만 늘리는
하드웨어 처리 방법은 애니메이션 갱신에서는 스키닝 애니메이션 행렬 버퍼에 갱신된 애니메이션 행렬을 복사하고<span lang=EN-US>, </span>렌더링에서는
이를 그래픽 파이프라인에 연결하기만 하면 됩니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>먼저 스키닝이<span lang=EN-US> GPU</span>에서 처리될 수 있도록 다음과 같은 구조체를 준비합니다<span
lang=EN-US>. </span>스키닝에 대한 구조체 설정은 이전의 고정 기능 파이프라인에서의 스키닝 부분을 참고 하기 바랍니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>struct</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>VtxBlend</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>VEC3</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; p;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>FLOAT</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g[</span><span
lang=EN-US style='color:red'>3</span><span lang=EN-US>];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// BLEND WEIGHT</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>BYTE</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m[</span><span
lang=EN-US style='color:red'>4</span><span lang=EN-US>];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// MATRIX INDEX</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>enum</span><span lang=EN-US> {&nbsp; </span><span
lang=EN-US style='color:#A000A0'>FVF</span><span lang=EN-US> = (</span><span
lang=EN-US style='color:#A000A0'>D3DFVF_XYZB4</span><span lang=EN-US> | </span><span
lang=EN-US style='color:#A000A0'>D3DFVF_LASTBETA_UBYTE4</span><span lang=EN-US>),&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; };</span></p>

<p class=MsoNormal><span lang=EN-US>};</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>다음으로 그래픽 파이프라인에 설정할 <span lang=EN-US>Blending </span>행렬 배열을 선언합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:blue'>D3DXMATRIX</span><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; m_mtBlnd[</span><span lang=EN-US
style='color:#A000A0'>LCM_MAX_BLEND</span><span lang=EN-US>];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span lang=EN-US style='color:green'>Blending
Matrix Buffer</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>애니메이션 갱신에서 앞의 행렬 배열에 최종 월드 행렬인<span lang=EN-US> &quot;</span>애니메이션
갱신 행렬<span lang=EN-US> * </span>자신의 월드 행렬<span lang=EN-US>&quot; </span>값을 복사합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>INT</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>CLcmAcm</span><span lang=EN-US>::</span><span lang=EN-US
style='color:#880000'>FrameMove</span><span lang=EN-US>()</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='text-indent:40.0pt;word-break:keep-all'><span
lang=EN-US style='color:green'>// World </span><span style='color:green'>행렬 업데이트</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>for</span><span lang=EN-US>(n=</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>; n&lt;m_Header.nGeo;
++n)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>LcGeo</span><span lang=EN-US>*&nbsp; pGeo&nbsp;&nbsp;&nbsp; =
&amp;m_pGeo[n];</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>MATA</span><span lang=EN-US>&nbsp;&nbsp;&nbsp; mtAni;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>D3DXMatrixIdentity</span><span lang=EN-US>(&amp;mtAni);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>(pGeo-&gt;pAni)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mtAni
= pGeo-&gt;pAni[m_nAni];</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_mtBlnd[n]
=&nbsp; mtAni * m_mtWld;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>렌더링에서는 디바이스의<span lang=EN-US> Software Vertex Processing</span>을
활성화 합니다<span lang=EN-US>. </span>이것은 디바이스는<span lang=EN-US> Mixed </span>또는<span
lang=EN-US> Software</span>로 생성되어야 가능합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>다음으로 디바이스의 렌더링 상태에 대한 <span lang=EN-US>INDEXEDVERTEXBLENDENABLE</span>을
활성화 하고<span lang=EN-US>, VERTEXBLEND</span>에 적절한 값<span lang=EN-US>(D3DVBF_3WEIGHTS)</span>을
설정합니다<span lang=EN-US>. </span>마지막으로 <span lang=EN-US>SetTransform() </span>함수를
이용해서 스키닝 행렬 배열을 전달합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:blue'>void</span><span
lang=EN-US> </span><span lang=EN-US style='color:blue'>CLcmAcm</span><span
lang=EN-US>::</span><span lang=EN-US style='color:#880000'>Render</span><span
lang=EN-US>()</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal style='text-indent:40.0pt;word-break:keep-all'><span
lang=PT-BR style='color:blue'>for</span><span lang=PT-BR>(n=</span><span
lang=PT-BR style='color:red'>0</span><span lang=PT-BR>; n&lt;m_Header.nGeo;
++n)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=PT-BR style='color:blue'>LcGeo</span><span lang=PT-BR>*&nbsp; pGeo =
&amp;m_pGeo[n];</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_pDev-&gt;</span><span
lang=EN-US style='color:#880000'>SetSoftwareVertexProcessing</span><span
lang=EN-US>(</span><span lang=EN-US style='color:#A000A0'>TRUE</span><span
lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_pDev-&gt;</span><span
lang=EN-US style='color:#880000'>SetRenderState</span><span lang=EN-US>(</span><span
lang=EN-US style='color:#A000A0'>D3DRS_INDEXEDVERTEXBLENDENABLE</span><span
lang=EN-US>, </span><span lang=EN-US style='color:#A000A0'>TRUE</span><span
lang=EN-US> );</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_pDev-&gt;</span><span
lang=EN-US style='color:#880000'>SetRenderState</span><span lang=EN-US>(</span><span
lang=EN-US style='color:#A000A0'>D3DRS_VERTEXBLEND</span><span lang=EN-US>, </span><span
lang=EN-US style='color:#A000A0'>D3DVBF_3WEIGHTS</span><span lang=EN-US> );</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>for</span><span lang=EN-US>(k=</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>; k&lt;</span><span
lang=EN-US style='color:#A000A0'>LCM_MAX_BLEND</span><span lang=EN-US>; ++k)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_pDev-&gt;</span><span
lang=EN-US style='color:#880000'>SetTransform</span><span lang=EN-US>( </span><span
lang=EN-US style='color:#A000A0'>D3DTS_WORLDMATRIX</span><span lang=EN-US>(k),
&amp;m_mtBlnd[k] );</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_pDev-&gt;</span><span
lang=EN-US style='color:#880000'>DrawIndexedPrimitiveUP</span><span lang=EN-US>(…);</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>전체 코드는 <span lang=EN-US><a
href="https://github.com/3dapi/dv01_max/raw/master/mxp23_skinning_view2_hard.zip">mxp23_skinning_view2_hard.zip</a></span>을 참고
하기 바랍니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>쉐이더를 이용한 방법은 <span lang=EN-US><sub><img border=0 width=107
height=37 src="https://github.com/3dapi/bs25_shader1/raw/master/dv01_max.files/image045.gif"></sub></span>를 저수준 또는 고수준 언어<span
lang=EN-US>(High Level Shading Language)</span>로 구현하는 것입니다<span lang=EN-US>. </span>고수준
언어<span lang=EN-US> HLSL</span>로 작성할 때 가장 중요한 부분은 정점 처리 함수의 입력 인수와 시멘틱 정의는 신중해야
합니다<span lang=EN-US>. </span>다음 함수는 스키닝에 대한<span lang=EN-US> HLSL </span>코드입니다<span
lang=EN-US>. </span>인덱스에 대한 인수 정의를 <span lang=EN-US style='color:blue'>int4</span>로
설정하고 있음을 기억하기 바랍니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>입력 레지스터 값은<span lang=EN-US> Read Only</span>이기 때문에 값을 변경할 수 없습니다<span
lang=EN-US>. </span>이런 이유로 <span lang=EN-US>Wgx </span>변수에 입력 레지스터 값<span
lang=EN-US>(Wgt)</span>을 복사하고 인덱스<span lang=EN-US> 3</span>에 대한 값을 설정하고 있습니다<span
lang=EN-US>. </span>간단히<span lang=EN-US> for</span>문에서 비중과 행렬을 곱셈한 후 이 결과를 누적시켜
<span lang=EN-US><sub><img border=0 width=23 height=21
src="https://github.com/3dapi/bs25_shader1/raw/master/dv01_max.files/image043.gif"></sub></span>를 구하고 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>또한 <span lang=EN-US><sub><img border=0 width=23 height=21
src="https://github.com/3dapi/bs25_shader1/raw/master/dv01_max.files/image043.gif"></sub></span>의 마지막<span lang=EN-US> _44 </span>값이<span
lang=EN-US> 1 </span>보다 멀리 떨어져 있으면 <span lang=EN-US><sub><img border=0
width=23 height=21 src="https://github.com/3dapi/bs25_shader1/raw/master/dv01_max.files/image043.gif"></sub></span>의 행렬을 단위행렬로 만들어야
합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US><sub><img border=0 width=23 height=21
src="https://github.com/3dapi/bs25_shader1/raw/master/dv01_max.files/image043.gif"></sub></span>을 구하고 나서 이 행렬에 객체의 월드 행렬을 곱해서 최종
월드 행렬을 만든 다음 정점을 월드 변환<span lang=EN-US>, </span>뷰 변환<span lang=EN-US>, </span>투영
변환에 대한 연산을 진행합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float4x4 </span><span lang=EN-US>m_mtBlnd[</span><span
lang=EN-US style='color:red'>128</span><span lang=EN-US>]: </span><span
lang=EN-US style='color:blue'>WORLDMATRIXARRAY</span><span lang=EN-US>;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Blending Matrix Buffer</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float4</span><span lang=EN-US> </span><span lang=EN-US
style='color:#880000'>VtxBlend</span><span lang=EN-US>(&nbsp; </span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US> Pos: </span><span
lang=EN-US style='color:blue'>POSITION</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,
</span><span lang=EN-US style='color:blue'>float4</span><span lang=EN-US> Wgt: </span><span
lang=EN-US style='color:blue'>BLENDWEIGHT</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,
</span><span lang=EN-US style='color:blue'>int4</span><span lang=EN-US>&nbsp;&nbsp;
Idx: </span><span lang=EN-US style='color:blue'>BLENDINDICES </span><span
lang=EN-US>) : </span><span lang=EN-US style='color:blue'>POSITION</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Pout
=</span><span lang=EN-US style='color:red'>0</span><span lang=EN-US>.</span><span
lang=EN-US style='color:red'>0f</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float4x4</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mtW
= </span><span lang=EN-US style='color:red'>0</span><span lang=EN-US>.</span><span
lang=EN-US style='color:red'>0f</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Wgx
= Wgt;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Wgx[</span><span
lang=EN-US style='color:red'>3</span><span lang=EN-US>] = </span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>0f</span><span lang=EN-US> - (Wgx[</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>] + Wgx[</span><span lang=EN-US
style='color:red'>1</span><span lang=EN-US>] + Wgx[</span><span lang=EN-US
style='color:red'>2</span><span lang=EN-US>]);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// ΣMi * Wi </span><span style='color:green'>연산</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>for</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>int</span><span lang=EN-US> i=</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>; i&lt;</span><span
lang=EN-US style='color:red'>4</span><span lang=EN-US>; ++i)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mtW
+= Wgx[i] * m_mtBlnd[Idx[i]];</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// _44 </span><span style='color:green'>값이<span
lang=EN-US> 1</span>에서 멀리 떨어져 있으면 단위행렬로 만든다<span lang=EN-US>.</span></span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>(mtW._44 &lt;</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>001f</span><span lang=EN-US>)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mtW
= </span><span lang=EN-US style='color:blue'>float4x4</span><span lang=EN-US>(</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,&nbsp; </span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>1</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,&nbsp; </span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>1</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,&nbsp; </span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>1</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US>mtW = </span><span lang=EN-US style='color:#880000'>mul</span><span
lang=EN-US>(mtW, m_mtWld);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>객체의 월드 행렬과 곱셈</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Pout
= </span><span lang=EN-US style='color:#880000'>mul</span><span lang=EN-US>(Pos,
mtW);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span lang=EN-US
style='color:green'>// </span><span style='color:green'>월드 변환</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Pout
= </span><span lang=EN-US style='color:#880000'>mul</span><span lang=EN-US>(Pout,
m_mtViw);&nbsp;&nbsp;&nbsp; </span><span lang=EN-US style='color:green'>// </span><span
style='color:green'>뷰 변환</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Pout
= </span><span lang=EN-US style='color:#880000'>mul</span><span lang=EN-US>(Pout,
m_mtPrj);&nbsp;&nbsp;&nbsp; </span><span lang=EN-US style='color:green'>// </span><span
style='color:green'>투영 변한</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> P;</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>쉐이더 코드는 <span lang=EN-US><a
href="https://github.com/3dapi/dv01_max/raw/master/mxp23_skinning_view3_shader1.zip">mxp23_skinning_view3_shader1.zip</a></span>의<span
lang=EN-US> &quot;data/shader.fx&quot;</span>를 참고 하기 바랍니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>렌더링에서는 뷰 행렬<span lang=EN-US>, </span>투영 행렬<span lang=EN-US>,
</span>월드 행렬<span lang=EN-US>, Blending </span>행렬을 설정하고 장면을 연출합니다<span
lang=EN-US>. Blending </span>행렬은 이전의 하드웨어 처리에서 사용한 행렬 배열을 그대로 사용 합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>m_pEft-&gt;</span><span
lang=EN-US style='color:#880000'>SetMatrix</span><span lang=EN-US>(</span><span
lang=EN-US style='color:fuchsia'>&quot;m_mtViw&quot;</span><span lang=EN-US>,
&amp;mtViw); </span><span lang=EN-US style='color:green'>// </span><span
style='color:green'>뷰 행렬 설정</span></p>

<p class=MsoNormal><span lang=EN-US>m_pEft-&gt;</span><span lang=EN-US
style='color:#880000'>SetMatrix</span><span lang=EN-US>(</span><span
lang=EN-US style='color:fuchsia'>&quot;m_mtPrj&quot;</span><span lang=EN-US>,
&amp;mtPrj); </span><span lang=EN-US style='color:green'>// </span><span
style='color:green'>투영 행렬 설정</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>m_pEft-&gt;</span><span
lang=EN-US style='color:#880000'>SetMatrix</span><span lang=EN-US>(</span><span
lang=EN-US style='color:fuchsia'>&quot;m_mtWld&quot;</span><span lang=EN-US>,
&amp;m_mtWld);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span lang=EN-US
style='color:green'>// </span><span style='color:green'>월드 행렬 설정</span></p>

<p class=MsoNormal><span lang=EN-US>m_pEft-&gt;</span><span lang=EN-US
style='color:#880000'>SetMatrixArray</span><span lang=EN-US>(</span><span
lang=EN-US style='color:fuchsia'>&quot;m_mtBlnd&quot;</span><span lang=EN-US>,
m_mtBlnd, </span><span lang=EN-US style='color:#A000A0'>LCM_MAX_BLEND</span><span
lang=EN-US>); </span><span lang=EN-US style='color:green'>// Blending </span><span
style='color:green'>행렬 설정</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>hr =
m_pDev-&gt;</span><span lang=EN-US style='color:#880000'>DrawIndexedPrimitiveUP</span><span
lang=EN-US>(…);</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>전체 코드는 <span lang=EN-US><a
href="https://github.com/3dapi/dv01_max/raw/master/mxp23_skinning_view3_shader1.zip">mxp23_skinning_view3_shader1.zip</a></span>을
참고하기 바랍니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>만약 쉐이더 코드 작성에서 입력 레지스터<span lang=EN-US>(</span>입력 인수<span
lang=EN-US>)</span>의 설정에 어려움이 있으면 비중과 행렬의 인덱스를 텍스처 좌표에 적용해서 구현해도 됩니다<span
lang=EN-US>. </span>다음은 렌더링 오브젝트가 두 개의 텍스처 좌표를 사용하고 있을 때 스키닝 구현 예입니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float4</span><span lang=EN-US> </span><span lang=EN-US
style='color:#880000'>VtxBlend</span><span lang=EN-US>(&nbsp; </span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US> Pos: </span><span
lang=EN-US style='color:blue'>POSITION</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,
</span><span lang=EN-US style='color:blue'>float2</span><span lang=EN-US> Tx0: </span><span
lang=EN-US style='color:blue'>TEXCOORD0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>텍스처 좌표<span
lang=EN-US> 0</span></span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,
</span><span lang=EN-US style='color:blue'>float2</span><span lang=EN-US> Tx1: </span><span
lang=EN-US style='color:blue'>TEXCOORD1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>텍스처 좌표<span
lang=EN-US> 1</span></span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,
</span><span lang=EN-US style='color:blue'>float4</span><span lang=EN-US> Wgt: </span><span
lang=EN-US style='color:blue'>TEXCOORD2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Blending Weight</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,
</span><span lang=EN-US style='color:blue'>float4</span><span lang=EN-US> Idx: </span><span
lang=EN-US style='color:blue'>TEXCOORD3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Blending Index</span></p>

<p class=MsoNormal style='margin-left:40.0pt;text-indent:40.0pt;word-break:
keep-all'><span lang=EN-US>&nbsp;) : </span><span lang=EN-US style='color:blue'>POSITION</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US>&nbsp; Pout =</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>0f</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float4x4</span><span lang=EN-US> mtW = </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>0f</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>Σ<span
lang=EN-US>Mi * Wi </span>연산</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>for</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>int</span><span lang=EN-US> i=</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>; i&lt;</span><span
lang=EN-US style='color:red'>4</span><span lang=EN-US>; ++i)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mtW
+= Wgt[i] * m_mtBlnd[Idx[i]];</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>텍스처 좌표를 사용하게 되면 다음과 같이 정점 구조체와<span lang=EN-US> FVF</span>를 수정해야
합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>struct</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>VtxBlend</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>VEC3</span><span lang=EN-US>&nbsp;&nbsp;&nbsp; p;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>VEC2</span><span lang=EN-US>&nbsp;&nbsp;&nbsp; t0;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Texture Coordinate 0</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>VEC2</span><span lang=EN-US>&nbsp;&nbsp;&nbsp; t1;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Texture Coordinate 1</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>VEC4</span><span lang=EN-US>&nbsp;&nbsp;&nbsp; g;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// BLEND WEIGHT</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>VEC4</span><span lang=EN-US>&nbsp;&nbsp;&nbsp; m;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// MATRIX INDEX</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>enum</span><span lang=EN-US> {&nbsp; </span><span
lang=EN-US style='color:#A000A0'>FVF</span><span lang=EN-US> = (</span><span
lang=EN-US style='color:#A000A0'>D3DFVF_XYZ</span><span lang=EN-US> | </span><span
lang=EN-US style='color:#A000A0'>D3DFVF_TEX4 </span><span lang=EN-US>| \</span></p>

<p class=MsoNormal style='margin-left:80.0pt;text-indent:40.0pt;word-break:
keep-all'><span lang=EN-US style='color:#A000A0'>D3DFVF_TEXCOORDSIZE4</span><span
lang=EN-US>(</span><span lang=EN-US style='color:red'>2</span><span lang=EN-US>)
| </span><span lang=EN-US style='color:#A000A0'>D3DFVF_TEXCOORDSIZE4</span><span
lang=EN-US>(</span><span lang=EN-US style='color:red'>3</span><span lang=EN-US>)),
};</span></p>

<p class=MsoNormal><span lang=EN-US>};</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>Blend Weight</span>와<span lang=EN-US>
Matrix Index</span>는<span lang=EN-US> 4</span>개를 사용하므로<span lang=EN-US>
D3DXVECTOR4</span>를 사용하며 이 경우 텍스처 좌표 시스템을 <span lang=EN-US>D3DFVF_TEXCOORDSIZE4</span>로
변경해야 합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>텍스처 좌표를 사용하게 되어 정점의 크기가<span lang=EN-US> 16Byte </span>더 사용하지만
가장 무난하고 안전하게 사용할 수 있는 방법입니다<span lang=EN-US>. </span><span lang=EN-US><a
href="https://github.com/3dapi/dv01_max/raw/master/mxp23_skinning_view3_shader2.zip">mxp23_skinning_view3_shader2.zip</a></span>을
참고하기 바랍니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=182 height=136
src="https://github.com/3dapi/bs25_shader1/raw/master/dv01_max.files/image046.gif">&nbsp;<img border=0 width=182 height=136
src="https://github.com/3dapi/bs25_shader1/raw/master/dv01_max.files/image047.gif">&nbsp;<img border=0 width=182 height=136
src="https://github.com/3dapi/bs25_shader1/raw/master/dv01_max.files/image048.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>스키닝 애니메이션<span lang=EN-US>:
Software, Hardware, Shader&gt;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:14.0pt'>5.3.4
Interpolation</span></p>

<p class=MsoNormal>게임을 실행하는 개인용 컴퓨터의 성능은 차이가 있으므로 프레임과 프레임 사이를 보정해서 장면을 연출해야 합니다<span
lang=EN-US>. </span>가장 간단한 보정 방법은 선형 보간<span lang=EN-US>(Linear Interpolation)</span>으로
우리는 <span lang=EN-US>ASE</span>을 <span lang=EN-US>Parsing</span>할 때 해봤습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>ASE</span>에서는 위치<span lang=EN-US>, </span>회전에
사원수를 가지고 있는 상황에서 선형 보간을 구성했으나 지금은 행렬로 애니메이션 정보를 가지고 있어서 이 행렬에서 위치와 사원수를 얻어서 선형보간
한 다음 다시 행렬로 만들어야 합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>행렬에서<span lang=EN-US> _41, _42, _43</span>의 값은 이동에 대한 변환으로 위치를
나타냅니다<span lang=EN-US>. </span>회전의 경우에는 <span lang=EN-US>D3DXQuaternionRotationMatrix()</span>함수를
이용해서 사원수를 구합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>위치는 다음의 선형 보간 공식으로 구합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><i><span lang=EN-US>v' = (1 - t) * v1 + t * v2</span></i></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>사원수는 <span lang=EN-US>D3DXQuaternionSlerp() </span>함수를 이용합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>다음은 두 행렬과 비중<span lang=EN-US> t</span>가 주어질 때 위치와 회전에 대한 선형 보간입니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>void</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>CLcmAcm</span><span lang=EN-US>::</span><span lang=EN-US
style='color:#880000'>MatrixLerp</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>D3DXMATRIX</span><span lang=EN-US>* pOut</span></p>

<p class=MsoNormal style='margin-left:80.0pt;text-indent:40.0pt;word-break:
keep-all'><span lang=EN-US>, </span><span lang=EN-US style='color:blue'>const</span><span
lang=EN-US> </span><span lang=EN-US style='color:blue'>D3DXMATRIX</span><span
lang=EN-US>* m1, </span><span lang=EN-US style='color:blue'>const</span><span
lang=EN-US> </span><span lang=EN-US style='color:blue'>D3DXMATRIX</span><span
lang=EN-US>* m2, </span><span lang=EN-US style='color:blue'>DOUBLE</span><span
lang=EN-US> t)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>D3DXQUATERNION</span><span lang=EN-US> q, q1, q2;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>D3DXVECTOR3</span><span lang=EN-US>&nbsp;&nbsp;&nbsp; v,
v1, v2;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>D3DXQuaternionRotationMatrix</span><span
lang=EN-US>(&amp;q1, m1); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>회전 추출</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>D3DXQuaternionRotationMatrix</span><span
lang=EN-US>(&amp;q2, m2);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; v1
= </span><span lang=EN-US style='color:blue'>D3DXVECTOR3</span><span
lang=EN-US>(m1-&gt;_41, m1-&gt;_42, m1-&gt;_43);  </span><span lang=EN-US
style='color:green'>// </span><span style='color:green'>위치 추출</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=PT-BR>v2 = </span><span lang=PT-BR style='color:blue'>D3DXVECTOR3</span><span
lang=PT-BR>(m2-&gt;_41, m2-&gt;_42, m2-&gt;_43);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; v
= (</span><span lang=EN-US style='color:red'>1</span><span lang=EN-US> - t) *
v1 + t * v2;&nbsp;&nbsp;&nbsp; </span><span lang=EN-US> </span><span
lang=PT-BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>위치에 대한 선형 보간</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>D3DXQuaternionSlerp</span><span lang=EN-US>(&amp;q,
&amp;q1, &amp;q2, t); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>회전의 선형 보간</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>D3DXMatrixRotationQuaternion</span><span
lang=EN-US>(pOut, &amp;q);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>회전을 행렬로 전환</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pOut-&gt;_41
= v.x; pOut-&gt;_42 = v.y; pOut-&gt;_43 = v.z; </span><span lang=EN-US
style='color:green'>// </span><span style='color:green'>위치 적용</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>그런데 시간에 대한 애니메이션 간격을 좁게 설정하고 행렬을 추출했으면 앞의 코드처럼 계산하지 않고 행렬 자체를
선형 보간해도 됩니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>*pOut = (</span><span lang=EN-US
style='color:red'>1</span><span lang=EN-US> - t) * (*m1) + t * (*m2);</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이것이 가능한 이유는 회전의 경우 보간하는 두 사원수의 각도가 작으면 <span lang=EN-US><sub><img
border=0 width=57 height=19 src="https://github.com/3dapi/bs25_shader1/raw/master/dv01_max.files/image049.gif"></sub></span>가 되어
다음과 같이 회전의 사원수 보간 공식이 선형 보간으로 바뀌게 되기 때문에 행렬을 선형 보간 해도 되는 것입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><sub><img border=0 width=229 height=41
src="https://github.com/3dapi/bs25_shader1/raw/master/dv01_max.files/image050.gif"></sub></span></p>

<p class=MsoNormal><span lang=EN-US><sub><img border=0 width=171 height=41
src="https://github.com/3dapi/bs25_shader1/raw/master/dv01_max.files/image051.gif"></sub></span></p>

<p class=MsoNormal><span lang=EN-US><sub><img border=0 width=123 height=23
src="https://github.com/3dapi/bs25_shader1/raw/master/dv01_max.files/image052.gif"></sub></span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><a href="https://github.com/3dapi/dv01_max/raw/master/mxp24_interpolation.zip">mxp24_interpolation.zip</a></span>은
행렬을 선형 보간할 때와 사원수를 분리해서 보간하는 예입니다<span lang=EN-US>. </span>애니메이션의 간격이 좁기 때문에 눈에
띄게 보이는 차이는 없습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=302 height=227
src="https://github.com/3dapi/bs25_shader1/raw/master/dv01_max.files/image053.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>애니메이션 보간<span lang=EN-US>: <a
href="https://github.com/3dapi/dv01_max/raw/master/mxp24_interpolation.zip">mxp24_interpolation.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:16.0pt'>5.4 </span><span
style='font-size:16.0pt'>기타</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:14.0pt'>5.4.1 Normal</span></p>

<p class=MsoNormal>맥스의 모든 메쉬는 법선 벡터<span lang=EN-US>(Normal Vector)</span>를 가지고
있습니다<span lang=EN-US>. </span>또한 법선 벡터의 개수는 정점의 수와 일치 합니다<span lang=EN-US>. </span>법선
벡터를 추출하기 위해서 다음과 같이 메쉬에게 정점의 법선과<span lang=EN-US> Face(</span>삼각형 평면<span
lang=EN-US>)</span>에 대한 법선 벡터 생성을 요청합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:blue'>Mesh</span><span
lang=EN-US>* pMesh&nbsp;&nbsp;&nbsp; = &amp;pTri-&gt;</span><span lang=EN-US
style='color:#880000'>GetMesh</span><span lang=EN-US>();</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal><span lang=EN-US>pMesh-&gt;</span><span lang=EN-US
style='color:#880000'>buildNormals</span><span lang=EN-US>();</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>다음으로 법선 벡터를 저장할 공간을 생성하고 메쉬의<span lang=EN-US> getNormal() </span>함수를
이용해서 법선 벡터를 얻어와 저장합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:blue'>INT </span><span
lang=EN-US>iNvtx = pMesh-&gt;</span><span lang=EN-US style='color:#880000'>getNumVerts</span><span
lang=EN-US>();</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal><span lang=EN-US>pGeo-&gt;pNor = </span><span lang=EN-US
style='color:blue'>new</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>D3DXVECTOR3</span><span lang=EN-US>[iNvtx];</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:blue'>for</span><span lang=PT-BR> (n=</span><span lang=PT-BR
style='color:red'>0</span><span lang=PT-BR>; n&lt;iNvtx; ++n)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=PT-BR style='color:blue'>Point3</span><span lang=PT-BR> v = </span><span
lang=PT-BR style='color:#880000'>Normalize</span><span lang=PT-BR>(pMesh-&gt;</span><span
lang=PT-BR style='color:#880000'>getNormal</span><span lang=PT-BR>(n));&nbsp;&nbsp; </span><span
lang=PT-BR style='color:green'>// </span><span style='color:green'>법선벡터</span><span
style='color:green'> </span><span style='color:green'>추출</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pGeo-&gt;pNor[n].x
= v.x;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pGeo-&gt;pNor[n].y
= v.z; </span><span lang=PT-BR style='color:green'>//y &lt;--&gt; z </span><span
style='color:green'>교환</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pGeo-&gt;pNor[n].z
= v.y;</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:14.0pt'>5.4.2 Material</span></p>

<p class=MsoNormal><span lang=EN-US>Geometry</span>에 적용된 텍스처 파일 이름은 맥스의 재질<span
lang=EN-US>(Material)</span>에서 찾아야 합니다<span lang=EN-US>. </span>그런데<span
lang=EN-US> D3D</span>의 재질은 하나의 메쉬 덩어리<span lang=EN-US>(Geometry Object)</span>에
하나의 재질이 적용되는 데 반해서 맥스의 재질은 하나의 메쉬 안에서도 여러 재질을 사용하기도 합니다<span lang=EN-US>. </span>이러한
경우에는 삼각형들 각 재질에 따라 분리하고 다시 구축해야 하지만 이것은 프로그래머에게 너무나 많은 노력과 시간을 요구하게 되며 잘 해결되지도 않습니다<span
lang=EN-US>. </span>여기서 원칙을 세우는 것이 중요한데 나의 메쉬에는 하나의 텍스처만 적용하고 여러 메쉬가 결합하는 경우라면 각각의
메쉬를 따로 추출한 다음 프로그램에서 링크<span lang=EN-US>(link)</span>하는 것입니다<span lang=EN-US>. </span>이렇게
하면 게임에 올렸을 때 엉뚱한 텍스처가 붙거나 안 붙는 문제들을 어느 정도 해결할 수 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>본격적으로 재질에서 텍스처 파일 이름을 구해 봅시다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>INode </span>객체에서 우리는 재질을 다음과 같이 얻어올 수 있습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:blue'>INode</span><span lang=PT-BR>*&nbsp; pNode = m_vMaxNode[i];</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>Mtl</span><span lang=EN-US>*&nbsp;&nbsp;&nbsp; pMtrl = pNode-&gt;</span><span
lang=EN-US style='color:#880000'>GetMtl</span><span lang=EN-US>();</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>맥스의 재질은<span lang=EN-US> INode</span>처럼 하위 재질을 나무 구조<span
lang=EN-US>(Tree Structure)</span>로 가지고 있습니다<span lang=EN-US>. </span>따라서 재질을 얻은
다음에 하위 재질을 다음과 같이 얻어야 합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:blue'>int</span><span
lang=EN-US> iSub = pMtl-&gt;</span><span lang=EN-US style='color:#880000'>NumSubMtls</span><span
lang=EN-US>();</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>for</span><span lang=EN-US>(</span><span lang=EN-US
style='color:blue'>int</span><span lang=EN-US> i=</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>; i&lt;iSub; ++i)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>Mtl</span><span lang=EN-US>* pSub = pMtl-&gt;</span><span
lang=EN-US style='color:#880000'>GetSubMtl</span><span lang=EN-US>(i);</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이것은 노드를 모을 때처럼 재귀 호출<span lang=EN-US>(Recursive Call) </span>함수를
만들어서 전체 재질을 모아야 합니다<span lang=EN-US>. </span>재질을 모을 때 어느 노드에서 얻어진 재질인지 다음과 같은 구조체를
작성합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>struct</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>LcMtl</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=PT-BR style='color:blue'>INode</span><span lang=PT-BR>*&nbsp; pNode;&nbsp; </span><span
lang=PT-BR style='color:green'>// Node</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=PT-BR style='color:blue'>Mtl</span><span lang=PT-BR>*&nbsp;&nbsp;&nbsp; pMtrl;&nbsp; </span><span
lang=PT-BR style='color:green'>// Material</span></p>

<p class=MsoNormal><span lang=PT-BR>};</span></p>

<p class=MsoNormal><span lang=PT-BR>&nbsp;</span></p>

<p class=MsoNormal>노드와 재질을 저장할 수 있도록 이 구조체를 이용해서 다음과 같은<span lang=EN-US> STL</span>의
벡터 컨테이너를 만듭니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:blue'>std</span><span
lang=EN-US>::</span><span lang=EN-US style='color:blue'>vector</span><span
lang=EN-US>&lt;</span><span lang=EN-US style='color:blue'>LcMtl</span><span
lang=EN-US>&gt;&nbsp;&nbsp;&nbsp;&nbsp; m_vMaxMtrl;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>재귀 호출 함수 안에서 먼저 입력 받은 노드와 재질을 묶어서 저장합니다<span lang=EN-US>. </span>다음으로
하위 재질을 얻고 이 함수를 다시 호출합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>void</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>LcMax</span><span lang=EN-US>::</span><span lang=EN-US
style='color:#880000'>GatherMaterial</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>INode</span><span lang=EN-US>* pNode, </span><span
lang=EN-US style='color:blue'>Mtl</span><span lang=EN-US>* pMtl)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_vMaxMtrl.</span><span
lang=EN-US style='color:#880000'>push_back</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>LcMtl</span><span lang=EN-US>(pNode, pMtl));</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>int</span><span lang=EN-US> iSub = pMtl-&gt;</span><span
lang=EN-US style='color:#880000'>NumSubMtls</span><span lang=EN-US>();</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>for</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>int</span><span lang=EN-US> i=</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>; i&lt;iSub; ++i)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>Mtl</span><span lang=EN-US>* pSub = pMtl-&gt;</span><span
lang=EN-US style='color:#880000'>GetSubMtl</span><span lang=EN-US>(i);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>GatherMaterial</span><span lang=EN-US>(pNode,
pSub);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이렇게 노드에 대한 모든 재질을 저장했습니다<span lang=EN-US>. </span>다음으로 재질 안에서
텍스처 파일 이름을 가져와야 합니다<span lang=EN-US>. </span>맥스의 재질은 여러 텍스처를 가지고 있습니다<span
lang=EN-US>. </span>이들 텍스처는 조명 효과와 반사 효과 등에 대한 역할을 수행합니다<span lang=EN-US>. </span>우리가
가져오려는 텍스처는 조명 효과 중에서<span lang=EN-US> Diffuse Map</span>에 대한 텍스처이며 이 아이디는<span
lang=EN-US> &quot; ID_DI&quot; </span>입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>재질에서 이름을 가져오는 방법은 먼저 재질에서 하위 텍스처의 숫자를 알아내고 이 숫자만큼 순회하면서 <span
lang=EN-US>Texmap </span>객체를 얻습니다<span lang=EN-US>. Texmap </span>객체를 <span
lang=EN-US>BitmapTex </span>으로 캐스팅해서 <span lang=EN-US>GetMapName() </span>함수를 호출하면
이름을 가져오게 됩니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>INT</span><span lang=EN-US> iSub = pMtrl-&gt;</span><span
lang=EN-US style='color:#880000'>NumSubTexmaps</span><span lang=EN-US>();</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>for</span><span lang=EN-US>( j=</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>; j&lt;iSub; ++j)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>Texmap</span><span lang=EN-US>* subTex =
pMtrl-&gt;</span><span lang=EN-US style='color:#880000'>GetSubTexmap</span><span
lang=EN-US>(j);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>DumpTexture</span><span lang=EN-US>(pLcMtl,
subTex, j);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>void</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>LcMax</span><span lang=EN-US>::</span><span lang=EN-US
style='color:#880000'>DumpTexture</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>LcMtl</span><span lang=EN-US>* pLcMtrl, </span><span
lang=EN-US style='color:blue'>Texmap</span><span lang=EN-US>* txm, </span><span
lang=EN-US style='color:blue'>INT</span><span lang=EN-US> iSubIdx)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>경로를 포함한 텍스처 파일
이름을 가져온다<span lang=EN-US>.</span></span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>TSTR</span><span lang=EN-US> bitmapFile = ((</span><span
lang=EN-US style='color:blue'>BitmapTex</span><span lang=EN-US> *)txm)-&gt;</span><span
lang=EN-US style='color:#880000'>GetMapName</span><span lang=EN-US>();</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>하위 텍스처 검사</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>INT</span><span lang=EN-US> iSub = txm-&gt;</span><span
lang=EN-US style='color:#880000'>NumSubTexmaps</span><span lang=EN-US>();</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>for</span><span lang=EN-US>(i=</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>; i&lt;iSub; ++i)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>Texmap</span><span lang=EN-US>* pSub = txm-&gt;</span><span
lang=EN-US style='color:#880000'>GetSubTexmap</span><span lang=EN-US>(i);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>DumpTexture</span><span lang=EN-US>(pLcMtrl,
pSub, iSubIdx);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>각 노드는 같은 재질을 사용할 수 있습니다<span lang=EN-US>. </span>따라서 텍스처 파일이름이
중복 될 수 있는데<span lang=EN-US> STL</span>의<span lang=EN-US> Set </span>컨테이너를 이용하면 중복된
이름을 제거할 수 있습니다<span lang=EN-US>. </span>노드와 텍스처 파일 이름 연결은 기술적인 부분이므로 <span
lang=EN-US><a href="https://github.com/3dapi/dv01_max/raw/master/mxp25_lcm_skinning_plugin.zip">mxp25_lcm_skinning_plugin.zip</a>
</span>예제의 <span lang=EN-US>GatherTexture(), SetupTextureIndex(), FindTextureIndex()
</span>함수 등을 참고 하기 바랍니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:14.0pt'>5.4.3 </span><span
style='font-size:14.0pt'>텍스처 좌표</span></p>

<p class=MsoNormal>플러그인의 마지막인 텍스처 좌표 추출입니다<span lang=EN-US>. ASE</span>에서<span
lang=EN-US> &quot;</span>맥스의 정점은 텍스처 좌표에서 공유 될 수 있다<span lang=EN-US>&quot;</span>라고
언급한 적이 있습니다<span lang=EN-US>. </span>따라서 정점의 개수를 텍스처 좌표만큼 늘려주어야 합니다<span
lang=EN-US>. </span>그리고 맥스는 텍스처 좌표의 인덱스가 꼭<span lang=EN-US> 0</span>에서부터 시작하지 않으며
또한 중간에 사용하지 않는 인덱스도 있습니다<span lang=EN-US>. </span>완벽에 가까운 플러그인은 이런 것도 처리해야 하지만 역시
간단한 방법은 그래픽 담당자와 협의를 해서<span lang=EN-US> UV </span>정리를 부탁하는 것이 가장 현명한 방법입니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>UV</span>가 적용된 메쉬에서<span lang=EN-US>
Geometry</span>를 구성하는 방법을 정리하면 다음과 같습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>1. T-face</span>에서<span lang=EN-US> UV </span>삼각형에
대한 인덱스 리스트를 추출한다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>2. T-vertex</span>에서<span lang=EN-US> UV</span>를
추출한다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>3. T-face</span>에 대응하는 인덱스는<span
lang=EN-US> Face</span>인덱스와 같으므로 이들을 하나로 묶고<span lang=EN-US>, U, V </span>값도 설정한다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>4. </span>새로운 정점의 개수를<span lang=EN-US>
T-vertex </span>개수만큼 설정한다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>5. </span>정점의 위치<span lang=EN-US>, </span>법선
벡터<span lang=EN-US>, Bone</span>의 인덱스와 비중 값 등을 새로 만들고<span lang=EN-US> 3</span>번에서
묶은 인덱스 등을 참고해서 값을 새로 설정한다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>6. </span>이전의 위치<span lang=EN-US>, </span>법선<span
lang=EN-US>, Bone</span>에 대한 값들을 지우고 새로운 값들로 설정한다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이 과정은 <span lang=EN-US><a
href="https://github.com/3dapi/dv01_max/raw/master/mxp25_lcm_skinning_plugin.zip">mxp25_lcm_skinning_plugin.zip</a></span>의 <span
lang=EN-US>LcMax::SetupUV() </span>함수에 구현되어 있습니다<span lang=EN-US>. </span>주요 코드를
설명하면 먼저 메쉬에서<span lang=EN-US> T-face</span>의 숫자와<span lang=EN-US> T-vertex(UV) </span>숫자를
얻는 방법은 다음과 같습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>nTfce&nbsp;&nbsp; =
pMesh-&gt;</span><span lang=EN-US style='color:#880000'>getNumFaces</span><span
lang=EN-US>();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// T-face</span><span style='color:green'>와<span
lang=EN-US> Face</span>숫자는 같음</span></p>

<p class=MsoNormal><span lang=EN-US>nTvtt&nbsp;&nbsp; = pMesh-&gt;</span><span
lang=EN-US style='color:#880000'>getNumTVerts</span><span lang=EN-US>();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// T-vertex(UV) Number</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>다음으로 임시 버퍼에<span lang=EN-US> T-face</span>와<span lang=EN-US>
T-vertex</span>를 저장합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:green'>// T-face List </span><span style='color:green'>저장</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:blue'>for</span><span lang=EN-US>(n=</span><span lang=PT-BR
style='color:red'>0</span><span lang=EN-US>; n&lt;nTfce; ++n)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pNewFce[n]=</span><span
lang=EN-US style='color:blue'>VtxIdx</span><span lang=EN-US>( pMesh-&gt;tvFace[n].t[</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>]</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,
pMesh-&gt;tvFace[n].t[</span><span lang=EN-US style='color:red'>2</span><span
lang=EN-US>]</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,
pMesh-&gt;tvFace[n].t[</span><span lang=EN-US style='color:red'>1</span><span
lang=EN-US>]);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>}</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:green'>// T-vertex(UV) </span><span style='color:green'>저장</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>for</span><span lang=EN-US>(n=</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>; n&lt;nTvtt; ++n)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>UVVert</span><span lang=EN-US> t =
pMesh-&gt;tVerts[n];</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pTvtt[n].x
= t.x;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pTvtt[n].y
= </span><span lang=EN-US style='color:red'>1.f</span><span lang=EN-US> - t.y;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// DX</span><span style='color:green'>의<span
lang=EN-US> UV</span>에 맞게 수정</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>T-face</span>의 경우<span lang=EN-US> Face</span>처럼
인덱스가<span lang=EN-US> 0, 2, 1</span>로 되어야 합니다<span lang=EN-US>. </span>그리고<span
lang=EN-US> UV</span>에서<span lang=EN-US> V</span>값도<span lang=EN-US> ASE</span>처럼<span
lang=EN-US> &quot;1.0- V&quot; </span>로 설정해야 합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>다음으로 <span lang=EN-US>T-face, Face, U, V</span>를 작업을 편리하게 하기
위해 하나의 묶음을 만듭니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>std</span><span lang=EN-US>::</span><span lang=EN-US
style='color:blue'>vector</span><span lang=EN-US>&lt;</span><span lang=EN-US
style='color:blue'>_Tpck</span><span lang=EN-US> &gt;&nbsp;&nbsp;&nbsp; lsFceVtxUV;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>for</span><span lang=EN-US>(; itF != itL; ++itF)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>int</span><span lang=EN-US> nT = (*itF).first.n;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>int</span><span lang=EN-US> nV = (*itF).second;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>FLOAT</span><span lang=EN-US> U = pTvtt[nT].x;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>FLOAT</span><span lang=EN-US> V = pTvtt[nT].y;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lsFceVtxUV.</span><span
lang=EN-US style='color:#880000'>push_back</span><span lang=EN-US>( </span><span
lang=EN-US style='color:blue'>_Tpck</span><span lang=EN-US>(nT, nV, U, V));</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>Face</span>대신<span lang=EN-US> T-face</span>를
인덱스 리스트로 정하고 정점의 개수<span lang=EN-US>, </span>법선의 개수<span lang=EN-US>, </span>정점에
대한 본의 비중을 변경하고 이전 값에서 찾아와 복사합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>INT</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; nNewVtxSize
=&nbsp; lsFceVtxUV.</span><span lang=EN-US style='color:#880000'>size</span><span
lang=EN-US>();</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>D3DXVECTOR3</span><span lang=EN-US>* pNewPos = </span><span
lang=EN-US style='color:blue'>new</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>D3DXVECTOR3</span><span lang=EN-US>[nNewVtxSize]; </span><span
lang=EN-US style='color:green'>// new Position List</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>D3DXVECTOR3</span><span lang=EN-US>* pNewNor = </span><span
lang=EN-US style='color:blue'>new</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>D3DXVECTOR3</span><span lang=EN-US>[nNewVtxSize]; </span><span
lang=EN-US style='color:green'>// new Normal Vector</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>D3DXVECTOR2</span><span lang=EN-US>* pNewUVW = </span><span
lang=EN-US style='color:blue'>new</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>D3DXVECTOR2</span><span lang=EN-US>[nNewVtxSize]; </span><span
lang=EN-US style='color:green'>// new UVW Vector</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>for</span><span lang=EN-US>(n=</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>; n&lt;nNewVtxSize; ++n)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>INT</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; G
= lsFceVtxUV[n].G;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>정점의 인덱스</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>FLOAT</span><span lang=EN-US>&nbsp;&nbsp; U =
lsFceVtxUV[n].U;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>FLOAT</span><span lang=EN-US>&nbsp;&nbsp; V =
lsFceVtxUV[n].V;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pNewPos[n]
= pOldPos[G];</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pNewNor[n]
= pOldNor[G];</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pNewUVW[n].x
= U;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pNewUVW[n].y
= V;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>}</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>만약 정점에<span lang=EN-US> Bon</span>의
인덱스와 비중이 있으면 이들 또한 조정합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>LcmBoneS</span><span lang=EN-US>*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pNewBon
= </span><span lang=EN-US style='color:blue'>new</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>LcmBoneS</span><span lang=EN-US>[nNewVtxSize];&nbsp; </span><span
lang=EN-US style='color:green'>// new Bones</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>for</span><span lang=EN-US>(n=</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>; n&lt;nNewVtxSize; ++n)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>int</span><span lang=EN-US> G = lsFceVtxUV[n].G;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>정점의 인덱스</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>LcmBoneS</span><span lang=EN-US>* pBlndS=
&amp;pOldBon[G]; </span><span lang=EN-US style='color:green'>// Source</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>std</span><span lang=EN-US>::map&lt;</span><span
lang=EN-US style='color:blue'>INT</span><span lang=EN-US>, </span><span
lang=EN-US style='color:blue'>FLOAT</span><span lang=EN-US> &gt;::</span><span
lang=EN-US style='color:blue'>iterator</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _F
= pBlndS-&gt;vB.</span><span lang=EN-US style='color:#880000'>begin</span><span
lang=EN-US>();</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>std</span><span lang=EN-US>::map&lt;</span><span
lang=EN-US style='color:blue'>INT</span><span lang=EN-US>, </span><span
lang=EN-US style='color:blue'>FLOAT</span><span lang=EN-US> &gt;::</span><span
lang=EN-US style='color:blue'>iterator</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _L
= pBlndS-&gt;vB.</span><span lang=EN-US style='color:#A000A0'>end</span><span
lang=EN-US>();</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>for</span><span lang=EN-US>(; _F != _L; ++_F)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pNewBon[n].vB.</span><span
lang=EN-US style='color:#880000'>insert</span><span lang=EN-US>( *_F );</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>마지막으로 이전 값들을 지우고 새로운 값들로 변경합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#A000A0'>SAFE_DELETE_ARRAY</span><span lang=EN-US>(&nbsp;&nbsp;&nbsp;&nbsp; pOldFce );</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#A000A0'>SAFE_DELETE_ARRAY</span><span lang=EN-US>(&nbsp;&nbsp;&nbsp;&nbsp; pOldPos );</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#A000A0'>SAFE_DELETE_ARRAY</span><span lang=EN-US>(&nbsp;&nbsp;&nbsp;&nbsp; pOldNor );</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>pGeo-&gt;pFce&nbsp;&nbsp;&nbsp;&nbsp; =
pNewFce;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>pGeo-&gt;pPos&nbsp;&nbsp;&nbsp;&nbsp; =
pNewPos;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>pGeo-&gt;pNor&nbsp;&nbsp;&nbsp;&nbsp; =
pNewNor;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>pGeo-&gt;pUVW&nbsp;&nbsp;&nbsp;&nbsp; =
pNewUVW;</span></p>

<p class=MsoNormal><span lang=EN-US>pGeo-&gt;nVtx&nbsp;&nbsp;&nbsp;&nbsp; =
nNewVtxSize;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>파일에 기록할 때는 이전의 구조를 거의 그대로 유지하고 법선 벡터<span lang=EN-US>, </span>텍스처
파일 리스트<span lang=EN-US>, </span>정점<span lang=EN-US> UV </span>리스트를 마지막에 기록 합니다<span
lang=EN-US>. </span>전체 코드는 <span lang=EN-US><a
href="https://github.com/3dapi/dv01_max/raw/master/mxp25_lcm_skinning_plugin.zip">mxp25_lcm_skinning_plugin.zip</a></span>을 참고
하기 바랍니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>플러그인이 수정되어 뷰어도 수정해야 합니다<span lang=EN-US>. </span>뷰어에서 메쉬에 대한
정점 구조체를 다음과 같이 법선 벡터<span lang=EN-US>, </span>텍스처 좌표를 포함시키고<span lang=EN-US>
FVF</span>도 변경합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>struct</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>VtxBlend</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>VEC3</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; p;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>FLOAT</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g[</span><span
lang=EN-US style='color:red'>3</span><span lang=EN-US>];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// BLEND WEIGHT</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=PT-BR style='color:blue'>BYTE</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m[</span><span
lang=PT-BR style='color:red'>4</span><span lang=EN-US>];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=PT-BR style='color:green'>// MATRIX Index</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=PT-BR style='color:blue'>VEC3</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; n;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=PT-BR style='color:green'>// Normal Vector</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>VEC2</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; t;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Texture Coordinate</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>enum</span><span lang=EN-US> {&nbsp; </span><span
lang=EN-US style='color:#A000A0'>FVF</span><span lang=EN-US> = (</span><span
lang=EN-US style='color:#A000A0'>D3DFVF_XYZB4</span><span lang=EN-US> | </span><span
lang=EN-US style='color:#A000A0'>D3DFVF_LASTBETA_UBYTE4</span><span lang=EN-US>
|\</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;</span><span lang=EN-US style='color:#A000A0'>D3DFVF_NORMAL</span><span
lang=EN-US> | </span><span lang=EN-US style='color:#A000A0'>D3DFVF_TEX1</span><span
lang=EN-US>),&nbsp;&nbsp; };</span></p>

<p class=MsoNormal><span lang=EN-US>};</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>파일을 읽는 부분과 렌더링에서 텍스처 연결은 어렵지 않으므로 넘어가겠습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>텍스처와 조명을 픽셀 쉐이더에서 처리할 수 있도록 다음과 같은 구조체를 선언합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>struct</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>SVsOut</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US>&nbsp; Pos: </span><span
lang=EN-US style='color:blue'>POSITION</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float2</span><span lang=EN-US>&nbsp; Tex: </span><span
lang=EN-US style='color:blue'>TEXCOORD0</span><span lang=EN-US>; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>정점의 텍스처 좌표</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float3</span><span lang=EN-US>&nbsp; Nor: </span><span
lang=EN-US style='color:blue'>TEXCOORD7</span><span lang=EN-US>; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>정점의 법선 벡터</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>};</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>정점 데이터가 법선 벡터<span lang=EN-US>, </span>텍스처 좌표를 포함하고 있으므로 정점 처리
함수의 입력 인수에 법선과 텍스처 좌표를 추가합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>SVsOut</span><span lang=EN-US> </span><span lang=EN-US
style='color:#880000'>VtxBlend</span><span lang=EN-US>(&nbsp; </span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US> Pos: </span><span
lang=EN-US style='color:blue'>POSITION</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Position</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,
</span><span lang=EN-US style='color:blue'>float4</span><span lang=EN-US> Wgt: </span><span
lang=EN-US style='color:blue'>BLENDWEIGHT</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Blending Weight</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,
</span><span lang=EN-US style='color:blue'>int4</span><span lang=EN-US>&nbsp;&nbsp;
Idx: </span><span lang=EN-US style='color:blue'>BLENDINDICES</span><span
lang=EN-US>&nbsp;&nbsp;&nbsp; </span><span lang=EN-US style='color:green'>//
Blending Index</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,
</span><span lang=EN-US style='color:blue'>float3</span><span lang=EN-US> Nor: </span><span
lang=EN-US style='color:blue'>NORMAL</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Normal Vector</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,
</span><span lang=EN-US style='color:blue'>float2</span><span lang=EN-US> Tex: </span><span lang=EN-US style='color:blue'>TEXCOORD0</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Texture Coordinate</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>SVsOut</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Out
= (</span><span lang=EN-US style='color:blue'>SVsOut</span><span lang=EN-US>)</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Out.Nor
= Nor;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Out.Tex
= Tex;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> Out;</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>법선 벡터와 텍스처는 특별히 처리해야 할 일이 없으므로 구조체에 복사해서 그대로 출력합니다<span
lang=EN-US>. </span>픽셀 쉐이더 처리 함수에서는<span lang=EN-US> UV </span>좌표를 이용해서 텍스처에서 색상을
샘플링<span lang=EN-US>(Sampling) </span>합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float4</span><span lang=EN-US> </span><span lang=EN-US
style='color:#880000'>PxlBlend</span><span lang=EN-US>(</span><span lang=EN-US
style='color:blue'>SVsOut</span><span lang=EN-US> In) : </span><span
lang=EN-US style='color:blue'>COLOR0</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US> Out = tex2D(smp0,
In.Tex);&nbsp;&nbsp;&nbsp;&nbsp; </span><span lang=EN-US style='color:green'>//
Sampling from Texture by Sampler</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> Out;</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>조명은 처리하지 않았는데 이 부분은 여러분들께서 채워보시기 바랍니다<span lang=EN-US>. </span>다음으로
테크닉에 픽셀 처리 함수를 지정합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>technique</span><span lang=EN-US> Tech</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>pass</span><span lang=EN-US> P1</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>VertexShader</span><span lang=EN-US> = </span><span
lang=EN-US style='color:blue'>compile</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>vs_2_0</span><span lang=EN-US> </span><span
lang=EN-US style='color:#880000'>VtxBlend</span><span lang=EN-US>();</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>PixelShader</span><span lang=EN-US> &nbsp;= </span><span
lang=EN-US style='color:blue'>compile</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>ps_2_0</span><span lang=EN-US> </span><span
lang=EN-US style='color:#880000'>PxlBlend</span><span lang=EN-US>();</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><a href="https://github.com/3dapi/dv01_max/raw/master/mxp25_lcm_skinning_viewer.zip">mxp25_lcm_skinning_viewer.zip</a></span>을
실행하면 다음 그림처럼<span lang=EN-US> UV</span>가 적용된 화면을 볼 수 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=272 height=204
src="https://github.com/3dapi/bs25_shader1/raw/master/dv01_max.files/image054.gif">&nbsp;<img border=0 width=272 height=204
src="https://github.com/3dapi/bs25_shader1/raw/master/dv01_max.files/image055.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>텍스처가 적용된 스키닝 예제<span lang=EN-US>:
</span><span lang=EN-US><a href="https://github.com/3dapi/dv01_max/raw/master/mxp25_lcm_skinning_viewer.zip">mxp25_lcm_skinning_viewer.zip</a>&gt;</span></p>
<br>
<br>

</div>

<?php
	include '../base/lc_tail.php';
?>
